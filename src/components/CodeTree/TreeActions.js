import $ from 'jquery'
import jstree from 'jstree';

let source = {"tree":[{"text":"cloud","state":{"opened":true},"type":"folder","children":[{"text":"app.js","data":{"code":"data:plain/text;base64,J3VzZSBzdHJpY3QnOwoKdmFyIF9yZWdlbmVyYXRvciA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3InKTsKCnZhciBfcmVnZW5lcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVnZW5lcmF0b3IpOwoKdmFyIF9wYXRoID0gcmVxdWlyZSgncGF0aCcpOwoKdmFyIF9wYXRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhdGgpOwoKdmFyIF9ib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTsKCnZhciBfYm9keVBhcnNlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ib2R5UGFyc2VyKTsKCnZhciBfY29va2llUGFyc2VyID0gcmVxdWlyZSgnY29va2llLXBhcnNlcicpOwoKdmFyIF9jb29raWVQYXJzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29va2llUGFyc2VyKTsKCnZhciBfY28gPSByZXF1aXJlKCdjbycpOwoKdmFyIF9jbzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbyk7Cgp2YXIgX2dldEI0YVVzZXJzID0gcmVxdWlyZSgnLi9saWIvZ2V0QjRhVXNlcnMnKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgphcHAuc2V0KCd2aWV3cycsIF9wYXRoMi5kZWZhdWx0LmpvaW4oX19kaXJuYW1lLCAndmlld3MnKSk7CmFwcC5zZXQoJ3ZpZXcgZW5naW5lJywgJ2VqcycpOwoKYXBwLnVzZShfYm9keVBhcnNlcjIuZGVmYXVsdC51cmxlbmNvZGVkKHsKICBleHRlbmRlZDogZmFsc2UKfSkpOwoKYXBwLnVzZShfYm9keVBhcnNlcjIuZGVmYXVsdC5qc29uKCkpOwoKYXBwLnVzZSgoMCwgX2Nvb2tpZVBhcnNlcjIuZGVmYXVsdCkoKSk7CgphcHAuZ2V0KCcvJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7CiAgKDAsIF9jbzIuZGVmYXVsdCkoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3IyLmRlZmF1bHQubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgdmFyIHV0bV9jYW1wYWlnbnMsIHV0bV9zb3VyY2VzLCB1dG1fdGVybXMsIHV0bV9tZWRpdW1zLCB1dG1fY29udGVudHM7CiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gKDAsIF9nZXRCNGFVc2Vycy5nZXREaXN0aW5jdENhbXBhaWducykoKTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHV0bV9jYW1wYWlnbnMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgcmV0dXJuICgwLCBfZ2V0QjRhVXNlcnMuZ2V0RGlzdGluY3RTb3VyY2VzKSgpOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgdXRtX3NvdXJjZXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgcmV0dXJuICgwLCBfZ2V0QjRhVXNlcnMuZ2V0RGlzdGluY3RUZXJtcykoKTsKCiAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgIHV0bV90ZXJtcyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMTsKICAgICAgICAgICAgcmV0dXJuICgwLCBfZ2V0QjRhVXNlcnMuZ2V0RGlzdGluY3RNZWRpdW1zKSgpOwoKICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgIHV0bV9tZWRpdW1zID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE0OwogICAgICAgICAgICByZXR1cm4gKDAsIF9nZXRCNGFVc2Vycy5nZXREaXN0aW5jdENvbnRlbnRzKSgpOwoKICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgIHV0bV9jb250ZW50cyA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICB1dG1fY2FtcGFpZ25zID0gdXRtX2NhbXBhaWducy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICByZXR1cm4gYTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHV0bV9zb3VyY2VzID0gdXRtX3NvdXJjZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGE7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB1dG1fdGVybXMgPSB1dG1fdGVybXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGE7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB1dG1fbWVkaXVtcyA9IHV0bV9tZWRpdW1zLmZpbHRlcihmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgIHJldHVybiBhOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdXRtX2NvbnRlbnRzID0gdXRtX2NvbnRlbnRzLmZpbHRlcihmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgIHJldHVybiBhOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywgeyB1dG1fY2FtcGFpZ25zOiB1dG1fY2FtcGFpZ25zLCB1dG1fc291cmNlczogdXRtX3NvdXJjZXMsIHV0bV90ZXJtczogdXRtX3Rlcm1zLCB1dG1fbWVkaXVtczogdXRtX21lZGl1bXMsIHV0bV9jb250ZW50czogdXRtX2NvbnRlbnRzIH0pOwoKICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICBjYXNlICdlbmQnOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgfSkpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgcmVzLnJlbmRlcignaW5kZXgnLCByZXN1bHQpOwogIH0pOwp9KTsKCmFwcC5nZXQoJy9yZXBvcnQnLCBmdW5jdGlvbiAocmVxLCByZXMpIHsKICBQYXJzZS5DbG91ZC5ydW4oJ3JlcG9ydCcsIHJlcS5xdWVyeSkudGhlbihmdW5jdGlvbiAocmVwb3J0KSB7CiAgICByZXMuc3RhdHVzKDIwMCkuanNvbihyZXBvcnQpOwogIH0pOwp9KTs="}},{"text":"checkoutIntegration.js","data":{"code":"data:plain/text;base64,J3VzZSBzdHJpY3QnOwoKdmFyIF9tb25nb2RiID0gcmVxdWlyZSgnbW9uZ29kYicpOwoKdmFyIF9tb25nb2RiMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vbmdvZGIpOwoKdmFyIF9jaGVja291dCA9IHJlcXVpcmUoJy4vdXRpbC9jaGVja291dCcpOwoKdmFyIGNoZWNrb3V0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2NoZWNrb3V0KTsKCnZhciBfZGIyID0gcmVxdWlyZSgnLi91dGlsL2RiJyk7Cgp2YXIgZGIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfZGIyKTsKCnZhciBfc2V0dGluZ3MgPSByZXF1aXJlKCcuL3NldHRpbmdzJyk7Cgp2YXIgX3NldHRpbmdzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldHRpbmdzKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKdmFyIFN1YnNjcmlwdGlvbiA9IFBhcnNlLk9iamVjdC5leHRlbmQoJ1N1YnNjcmlwdGlvbicpOwp2YXIgQjRhVXNlciA9IFBhcnNlLk9iamVjdC5leHRlbmQoJ0I0YVVzZXInKTsKClBhcnNlLkNsb3VkLmRlZmluZSgnYWRkU3Vic2NyaXB0aW9uJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7CiAgdmFyIGdhdGV3YXkgPSByZXEucGFyYW1zWydnYXRld2F5J107CiAgdmFyIGdhdGV3YXlDb2RlID0gcmVxLnBhcmFtc1snZ2F0ZXdheV9jb2RlJ107CiAgdmFyIGdhdGV3YXlFbWFpbCA9IHJlcS5wYXJhbXNbJ2dhdGV3YXlfZW1haWwnXTsKICB2YXIgaW5pdGlhbERhdGUgPSByZXEucGFyYW1zWydpbml0aWFsX2RhdGUnXTsKICB2YXIgYXBwSWQgPSByZXEucGFyYW1zWydhcHBfaWQnXTsKICB2YXIgcGxhbk5hbWUgPSByZXEucGFyYW1zWydwbGFuX25hbWUnXTsKICB2YXIgY2hlY2tvdXRJZCA9IHJlcS5wYXJhbXNbJ2NoZWNrb3V0X2lkJ107CgogIHZhciBzdWJzID0gbmV3IFN1YnNjcmlwdGlvbih7CiAgICBnYXRld2F5OiBnYXRld2F5LAogICAgZ2F0ZXdheV9jb2RlOiBnYXRld2F5Q29kZSwKICAgIGdhdGV3YXlfZW1haWw6IGdhdGV3YXlFbWFpbCwKICAgIGFwcF9pZHM6IFthcHBJZF0sCiAgICBjaGVja291dF9pZDogY2hlY2tvdXRJZCwKICAgIGluaXRpYWxfZGF0ZTogbmV3IERhdGUoaW5pdGlhbERhdGUpCiAgfSk7CgogIHJldHVybiBjaGVja291dC5nZXRQbGFucygpLnRoZW4oZnVuY3Rpb24gKHBsYW5zKSB7CiAgICByZXR1cm4gc3Vicy5zYXZlKCkudGhlbihmdW5jdGlvbiAoc3VicykgewogICAgICByZXR1cm4gZ2V0T3duZXIoYXBwSWQpLnRoZW4oZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgICB2YXIgdXNlciA9IF9yZWYudXNlciwKICAgICAgICAgICAgdXNlcklkID0gX3JlZi51c2VySWQ7CgogICAgICAgIGlmICh1c2VyKSBzdWJzLnNldCgndXNlcicsIHVzZXIpOwogICAgICAgIGlmICh1c2VySWQpIHN1YnMuc2V0KCd1c2VyX2lkJywgdXNlcklkKTsKICAgICAgICBzdWJzLnNldCgndmFsdWUnLCBwbGFuc1twbGFuTmFtZV0pOwogICAgICAgIHJldHVybiBzdWJzLnNhdmUoKTsKICAgICAgfSk7CiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgcmVzLnN1Y2Nlc3MoJ3N1YnNjcmlwdGlvbiBzYXZlZCBmb3IgJyArIGFwcElkKTsKICAgIH0pOwogIH0pOwp9KTsKCmZ1bmN0aW9uIGdldE93bmVyKGFwcElkKSB7CiAgcmV0dXJuIGRiLmdldENvbm5lY3Rpb24oX3NldHRpbmdzMi5kZWZhdWx0Lk1PTkdPX1VSSSkudGhlbihmdW5jdGlvbiAoX2RiKSB7CiAgICByZXR1cm4gX2RiLmNvbGxlY3Rpb24oJ1BhcnNlQXBwJywgeyByZWFkUHJlZmVyZW5jZTogX21vbmdvZGIyLmRlZmF1bHQuU0VDT05EQVJZX1BSRUZFUlJFRCB9KS5maW5kKHsKICAgICAgYXBwSWQ6IGFwcElkCiAgICB9KS50b0FycmF5KCkudGhlbihmdW5jdGlvbiAoYXBwcykgewogICAgICBpZiAoYXBwcyAmJiBhcHBzWzBdKSB7CiAgICAgICAgdmFyIGFwcCA9IGFwcHNbMF07CiAgICAgICAgdmFyIHF1ZXJ5ID0gbmV3IFBhcnNlLlF1ZXJ5KEI0YVVzZXIpOwogICAgICAgIHF1ZXJ5LmVxdWFsVG8oJ2ludGVybmFsX2lkJywgYXBwLm93bmVyLmlkKTsKICAgICAgICByZXR1cm4gcXVlcnkuZmlyc3QoeyB1c2VNYXN0ZXJLZXk6IHRydWUgfSkudGhlbihmdW5jdGlvbiAodXNlcikgewogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgdXNlcjogdXNlciwKICAgICAgICAgICAgdXNlcklkOiBhcHAub3duZXIuaWQKICAgICAgICAgIH07CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogIH0pOwp9"}},{"text":"dailyJobs.js","data":{"code":"data:plain/text;base64,"}},{"text":"lib","children":[{"text":"back4app.json","data":{"code":"data:plain/text;base64,ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAiYmFjazRhcHAtMTczMzE4IiwKICAicHJpdmF0ZV9rZXlfaWQiOiAiYmJhZmZlYTMyNTI2MjUxNzFmMTk2NWIyMmZmNzczNmU5NGYwYzY0OSIsCiAgInByaXZhdGVfa2V5IjogIi0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxuTUlJRXZRSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2N3Z2dTakFnRUFBb0lCQVFDNWZqalVYOERoaDhxUlxuVHFpbi94MzlJeGhpdXQ5bG4rTGFiWERuWkxkcnZZZ0FaOFF4dW1aTW5keVZ2V2xhMVBDRU94aS9HY3g0TzUxb1xuRHA4MFpZdmM0dVU5RmpOZ01wVi8rTjlRckpyTUpCYnh4V0xPRkphcUJwUXhFZTFMaFRqVGREeU5obWtpcE1TNFxuN3V0L1E3ckprTk5telIwc1R3WlY0TWtobFlFc2hSSmZXVVVDeEFJaVJMSzhTMlM2a21hdHY2TGgvVTBuMVBXalxuNWFBbVBuSDZQcWcwVFFyY1pTK1hHdzZmTEQ1QzJpSFpFTFBENEViMVR3c0o4RjlBMFN6WmxKMC9Od2I1akltb1xuNnN4WGdUVHlnc01JOVZKMkovNkp6UnFWdEtCVnJGNmJsejhsNzVyWlJZWXZKNFI4bFpzM3hIczI3ZmhjR1JUZ1xuKzFucWkxUkpBZ01CQUFFQ2dnRUFFRFYvbVhpaWsxMU9nMk1URkN4cGFQT0xwU09ubmlydlk3U1kzMGVBU3dtOVxuWEMwS2RSUDdtTlN2UldYUFVvWWdCd0N6cnJpbzZFQVdzYW54YnpQZWJ4ZGovbklMQnV3ZlZKYjJvTEhzakV2WFxudGhuUVYvOXU2UDJqMlNQZXVnWXl0ZHVjUFB1OVY5blJGNTN5ZGVVQkZLMnpUaHpuWUl0VDhPWXdmVFJNeDRzcVxuaytNekRydDBmZmgxNUs1QXd1Z0tSd1dVN0JzVlRuV0JQeDByRDgxOHFGdVViajU0YytlaWFYTHBReVc4RkxBRlxuOTBSTGFVUnFEUmlkS2o1QUgrZDJPSWNIVzBnRE5FSERuZ2VHN1JyaHptNi9XZld5OG1lNzl3TlgydzZGYmI0R1xualFNOXB4WktqbGlkNG0rYitXYkY4ckEwUUtzMk9FaE8zL0Jmd2E4VjV3S0JnUURjRklLeUxZNXZlNTlmQzRRQlxuU1ZTam1NeEZYbDFDWWIrYTVhanROSmNQU2Y3a0U1VXFLeXRjMDBWTlNvMXU5ckdGK3hFMCt5ZXE4aXkrRmJ5TFxuRTBkckR2Yy9nNVVNVXBVbEJOc05mNmg0TTJER3g0RnhveVR4U3RNUXZ3SlhFSmZ3Z1c2UU5WNURYY2pHODlhU1xuNE9HRmNWalRFbGxlYmE1NmovWDhHajl2VXdLQmdRRFh4SlFtS216aG9LYUNtVXZoUGJsTGVNcUNvMXNVR1lOUFxuMHJiZ1RYL0NVOXJMUzZFR3VXY0VnY2Z3dWc1eFFYaGhRQVpreTIwS3FBSms1OVRPV2k4V3NDMWtxYXNmRE1EL1xuSWRpVjNFMlR0Q1lLWVRCTzRDT0Mxb29Za29nWWhLWGF1OEFnTlB5RjNLR3V5VmxmeEpvZXVZQ2FMZU16Rm1pTlxuN0V2dFVhSW1jd0tCZ0FsdTA1OUJkcDV1cFFrVTNFYVYxd3ZnQzdsWmJ4UGVUckViOE42aDUydWZWMDU5VEdKdlxuVVQ5OFNyY2lYK2VHcVZzOXhLSUp0Y3lNN3NBQy9IN1ZoN1VlQWhqMTBkaWlYWVFscmlIbys5YVRGUzNQOVV0aVxubTcyLzRFWVNlYzR6aHQrbkhJOFB5b2VHcUlsbWdDYnhmcGtTbjZVRVgxSTl6MEd2ay9LSFNYckRBb0dCQUtVN1xuSWFSMGVycng5bkV1aVlBc2IxaFBZTzFYd1dpTC9SWEVyRXpxckRxWlVvUzZIczd5YmVSeXFqVTdsZEcvTER0MFxuOXpCNjQ3NzBXQmtEdStCbUNZZGJWUGV3UXAzZGUzSWxiaUdjK2o5eEJteU9icHNJWThsUEY2T25tdGNEeGFyU1xuZWxkdm5DMjZmb3BHSU00STFXbFA3eDZpbzBrOUVNWVdQVEs0Zis3bkFvR0FkNXpoeElHZkx4Q2ZqRXBJTDJMR1xuZlJKc2V2bHVHT2crVWV6aHlUUkNack9la3dnOU1OaThyVFVuVjVyNThzVjlZdFdTQnNyMnNrZlhTelhJQVZPTlxuU0V6cXhpTVZRU29BWHRJK0dpMWw1WG0waXVOVC9wMXpzSE1YM0xZYTBMVmh0NGJJZUc2b1lUcWJDV1dsS1JSWVxuUUtGeWlLYWNVWmM2NzdjOURVRWFpQWc9XG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tXG4iLAogICJjbGllbnRfZW1haWwiOiAiY29ob3J0LXJlcG9ydEBiYWNrNGFwcC0xNzMzMTguaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLAogICJjbGllbnRfaWQiOiAiMTEyMDQ3NzI4NjQxMTAxNDQ1MTQ2IiwKICAiYXV0aF91cmkiOiAiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLAogICJ0b2tlbl91cmkiOiAiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL3Rva2VuIiwKICAiYXV0aF9wcm92aWRlcl94NTA5X2NlcnRfdXJsIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS9jZXJ0cyIsCiAgImNsaWVudF94NTA5X2NlcnRfdXJsIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL3JvYm90L3YxL21ldGFkYXRhL3g1MDkvY29ob3J0LXJlcG9ydCU0MGJhY2s0YXBwLTE3MzMxOC5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIKfQo="}},{"text":"getAPICalls.js","data":{"code":"data:plain/text;base64,J3VzZSBzdHJpY3QnOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgUmVhZFByZWZlcmVuY2UgPSByZXF1aXJlKCdtb25nb2RiJykuUmVhZFByZWZlcmVuY2U7CnZhciBxdWVyeURhdGVzID0gcmVxdWlyZSgnLi4vdXRpbC9xdWVyeURhdGVzJyk7CnZhciBkYiA9IHJlcXVpcmUoJy4uL3V0aWwvZGInKTsKdmFyIHNldHRpbmdzID0gcmVxdWlyZSgnLi4vc2V0dGluZ3MnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlkLCBfcXVlcnkpIHsKICB2YXIgcXVlcnk7CiAgdmFyIGNvdW50ID0gMDsKICB2YXIgdXNlcnMgPSB7fTsKICB2YXIgZGF0YSA9IHt9OwogIHZhciBjb25uRGI7CiAgdHJ5IHsKICAgIHF1ZXJ5ID0gSlNPTi5wYXJzZShfcXVlcnkpOwogIH0gY2F0Y2ggKGUpIHsKICAgIHF1ZXJ5ID0gX3F1ZXJ5OwogIH0KCiAgdmFyIHJlc3BvbnNlID0ge307CgogIHJldHVybiBkYi5nZXRDb25uZWN0aW9uKHNldHRpbmdzLk1PTkdPX1VSSSkudGhlbihmdW5jdGlvbiAoX2RiKSB7CiAgICBjb25uRGIgPSBfZGI7CiAgICByZXR1cm4gX2RiLmNvbGxlY3Rpb24oJ1BhcnNlQXBwJywgeyByZWFkUHJlZmVyZW5jZTogUmVhZFByZWZlcmVuY2UuU0VDT05EQVJZX1BSRUZFUlJFRCB9KS5maW5kKHt9LCB7IGFwcElkOiAxLCBvd25lcjogMSB9KS5zb3J0KHsgJG5hdHVyYWw6IC0xIH0pLnRvQXJyYXkoKS50aGVuKGZ1bmN0aW9uIChhcHBzKSB7CiAgICAgIHJldHVybiBnZXRSZWN1cnNpdmVseShhcHBzKTsKICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICByZXNwb25zZS5hcGlDYWxscyA9IGNvdW50OwogICAgICBpZiAocXVlcnkucGVyVXNlcnMgPT09IHRydWUpIHsKICAgICAgICByZXNwb25zZS5wZXJVc2VycyA9IHVzZXJzOwogICAgICB9CiAgICAgIHJldHVybiBfZGIuY2xvc2UoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gW3Jlc3BvbnNlXTsKICAgICAgfSk7CiAgICB9KTsKICB9KTsKCiAgZnVuY3Rpb24gZ2V0UmVjdXJzaXZlbHkoYXBwcywgaSkgewogICAgaSA9IGkgPyBpIDogMDsKICAgIHZhciBwYWNpbmcgPSA1MDA7CiAgICB2YXIgc2xpY2VkQXBwcyA9IGFwcHMuc2xpY2UoaSAqIHBhY2luZywgKGkgKyAxKSAqIHBhY2luZyk7CiAgICBpZiAoIXNsaWNlZEFwcHNbMF0pIHJldHVybjsKICAgIHJldHVybiBfcHJvbWlzZTIuZGVmYXVsdC5hbGwoc2xpY2VkQXBwcy5tYXAoZnVuY3Rpb24gKGFwcCkgewogICAgICByZXR1cm4gY29ubkRiLmNvbGxlY3Rpb24oJ1JlcXVlc3RDb3VudGVyJykuYWdncmVnYXRlKFt7ICRtYXRjaDogeyBfaWQ6IHsgJyRndGUnOiBhcHAuYXBwSWQgKyAnOicgKyBxdWVyeS5iZWdpbkRhdGUsICckbHQnOiBhcHAuYXBwSWQgKyAnOicgKyBxdWVyeS5lbmREYXRlIH0gfSB9LCB7ICRncm91cDogeyBfaWQ6IGFwcC5hcHBJZCwgdG90YWw6IHsgJHN1bTogJyR0b3RhbCcgfSB9IH1dLCB7IHJlYWRQcmVmZXJlbmNlOiBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUllfUFJFRkVSUkVEIH0pLnRvQXJyYXkoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7CiAgICAgICAgaWYgKHJlc3VsdHMgJiYgcmVzdWx0c1swXSAmJiByZXN1bHRzWzBdLnRvdGFsKSB7CiAgICAgICAgICB1c2Vyc1thcHAub3duZXIuaWRdID0gdXNlcnNbYXBwLm93bmVyLmlkXSA/IHVzZXJzW2FwcC5vd25lci5pZF0gKyByZXN1bHRzWzBdLnRvdGFsIDogcmVzdWx0c1swXS50b3RhbDsKICAgICAgICAgIGNvdW50ICs9IHJlc3VsdHNbMF0udG90YWw7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgaSArPSAxOwogICAgICByZXR1cm4gZ2V0UmVjdXJzaXZlbHkoYXBwcywgaSk7CiAgICB9KTsKICB9Cn07Cgptb2R1bGUuZXhwb3J0cy5xdWVyeVRlbXBsYXRlID0gewogIGJlZ2luRGF0ZTogJzIwMTcwNTIzJywKICBlbmREYXRlOiAnMjAxNzA1MzAnLAogIHBlclVzZXJzOiBmYWxzZQp9Ow=="}},{"text":"getActivationDate.js","data":{"code":"data:plain/text;base64,J3VzZSBzdHJpY3QnOwoKLy92YXIgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7Cgp2YXIgX3JlZ2VuZXJhdG9yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvcicpOwoKdmFyIF9yZWdlbmVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWdlbmVyYXRvcik7Cgp2YXIgX2FzeW5jVG9HZW5lcmF0b3IyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3InKTsKCnZhciBfYXN5bmNUb0dlbmVyYXRvcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3luY1RvR2VuZXJhdG9yMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKdmFyIFJlYWRQcmVmZXJlbmNlID0gcmVxdWlyZSgnbW9uZ29kYicpLlJlYWRQcmVmZXJlbmNlOwp2YXIgcXVlcnlEYXRlcyA9IHJlcXVpcmUoJy4uL3V0aWwvcXVlcnlEYXRlcycpOwp2YXIgZGIgPSByZXF1aXJlKCcuLi91dGlsL2RiJyk7CnZhciBzZXR0aW5ncyA9IHJlcXVpcmUoJy4uL3NldHRpbmdzJyk7Cgp2YXIgdXBkYXRlVXNlcnMgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYgPSAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yMi5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gX2NhbGxlZShfZGIsIHVzZXJzKSB7CiAgICB2YXIgYmF0Y2g7CiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGJhdGNoID0gX2RiLmNvbGxlY3Rpb24oJ0I0YVVzZXInKS5pbml0aWFsaXplVW5vcmRlcmVkQnVsa09wKHsgdXNlTGVnYWN5T3BzOiB0cnVlIH0pOwoKCiAgICAgICAgICAgIHVzZXJzLmZvckVhY2goZnVuY3Rpb24gKHVzZXIpIHsKICAgICAgICAgICAgICBiYXRjaC5maW5kKHsgX2lkOiB1c2VyLl9pZC5zcGxpdCgnJCcpLnBvcCgpLCBhY3RpdmF0aW9uX2RhdGU6IG51bGwgfSkudXBkYXRlT25lKHsgJHNldDogeyBhY3RpdmF0aW9uX2RhdGU6IHVzZXIuYWN0aXZhdGlvbl9kYXRlIH0gfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgcmV0dXJuIGJhdGNoLmV4ZWN1dGUoKTsKCiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICBjYXNlICdlbmQnOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSwgdW5kZWZpbmVkKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiB1cGRhdGVVc2VycyhfeCwgX3gyKSB7CiAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCnZhciBnZXRBY3RpdmVVc2VycyA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3JlZjIgPSAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yMi5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoX2RiKSB7CiAgICB2YXIgQWN0aXZlVXNlcnM7CiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiBfZGIuY29sbGVjdGlvbignYWN0aXZlX3VzZXJzJywgeyByZWFkUHJlZmVyZW5jZTogUmVhZFByZWZlcmVuY2UuU0VDT05EQVJZX1BSRUZFUlJFRCB9KS5maW5kKCkudG9BcnJheSgpOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgQWN0aXZlVXNlcnMgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoJ3JldHVybicsIEFjdGl2ZVVzZXJzKTsKCiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICBjYXNlICdlbmQnOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUyLCB1bmRlZmluZWQpOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIGdldEFjdGl2ZVVzZXJzKF94MykgewogICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKdmFyIGdldERCID0gZnVuY3Rpb24gKCkgewogIHZhciBfcmVmMyA9ICgwLCBfYXN5bmNUb0dlbmVyYXRvcjMuZGVmYXVsdCkoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3IyLmRlZmF1bHQubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgIHJldHVybiBfcmVnZW5lcmF0b3IyLmRlZmF1bHQud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIGRiLmdldENvbm5lY3Rpb24oc2V0dGluZ3MuQVBQX01PTkdPX1VSSSk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgncmV0dXJuJywgX2NvbnRleHQzLnNlbnQpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgIGNhc2UgJ2VuZCc6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTMsIHVuZGVmaW5lZCk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gZ2V0REIoKSB7CiAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7Cgp2YXIgZXhlYyA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3JlZjQgPSAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yMi5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICB2YXIgX2RiLCB1c2VyczsKCiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiBnZXREQigpOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgX2RiID0gX2NvbnRleHQ0LnNlbnQ7CiAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNTsKICAgICAgICAgICAgcmV0dXJuIGdldEFjdGl2ZVVzZXJzKF9kYik7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICB1c2VycyA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDg7CiAgICAgICAgICAgIHJldHVybiB1cGRhdGVVc2VycyhfZGIsIHVzZXJzKTsKCiAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCdyZXR1cm4nLCAnU1VDQ0VTUycpOwoKICAgICAgICAgIGNhc2UgOToKICAgICAgICAgIGNhc2UgJ2VuZCc6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTQsIHVuZGVmaW5lZCk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gZXhlYygpIHsKICAgIHJldHVybiBfcmVmNC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCmlmIChyZXF1aXJlLm1haW4gPT09IG1vZHVsZSkgewogIGV4ZWMoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7CiAgICBwcm9jZXNzLmV4aXQoMCk7CiAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgY29uc29sZS5lcnJvcihlcnIpOwogICAgcHJvY2Vzcy5leGl0KGVycik7CiAgfSk7Cn0KCm1vZHVsZS5leHBvcnRzID0gZXhlYzs="}},{"text":"getActiveApps.js","data":{"code":"data:plain/text;base64,J3VzZSBzdHJpY3QnOwoKLy92YXIgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7Cgp2YXIgX3RydW5jID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL21hdGgvdHJ1bmMnKTsKCnZhciBfdHJ1bmMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJ1bmMpOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCnZhciBfa2V5cyA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cycpOwoKdmFyIF9rZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleXMpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBSZWFkUHJlZmVyZW5jZSA9IHJlcXVpcmUoJ21vbmdvZGInKS5SZWFkUHJlZmVyZW5jZTsKdmFyIHF1ZXJ5RGF0ZXMgPSByZXF1aXJlKCcuLi91dGlsL3F1ZXJ5RGF0ZXMnKTsKdmFyIGRiID0gcmVxdWlyZSgnLi4vdXRpbC9kYicpOwp2YXIgc2V0dGluZ3MgPSByZXF1aXJlKCcuLi9zZXR0aW5ncycpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaWQsIF9xdWVyeSkgewogIHZhciBxdWVyeTsKICB2YXIgY291bnQgPSAwOwogIHZhciB1c2VycyA9IHt9OwogIHZhciBkYXRhID0ge307CiAgdmFyIGNvbm5EYjsKICB0cnkgewogICAgcXVlcnkgPSBKU09OLnBhcnNlKF9xdWVyeSk7CiAgfSBjYXRjaCAoZSkgewogICAgcXVlcnkgPSBfcXVlcnk7CiAgfQoKICB2YXIgcmVzcG9uc2UgPSB7fTsKCiAgaWYgKCFxdWVyeS5lbmREYXRlIHx8ICFxdWVyeS5iZWdpbkRhdGUpIHsKICAgIHZhciBlbmREYXRlID0gbmV3IERhdGUobmV3IERhdGUoKS5zZXREYXRlKG5ldyBEYXRlKCkuZ2V0RGF0ZSgpKSk7CiAgICB2YXIgYmVnaW5EYXRlID0gbmV3IERhdGUobmV3IERhdGUoKS5zZXREYXRlKG5ldyBEYXRlKCkuZ2V0RGF0ZSgpIC0gNykpOwoKICAgIHF1ZXJ5LmJlZ2luRGF0ZSA9ICcnICsgYmVnaW5EYXRlLmdldEZ1bGxZZWFyKCkgKyBmb3JtYXREYXRlKGJlZ2luRGF0ZS5nZXRNb250aCgpICsgMSkgKyBmb3JtYXREYXRlKGJlZ2luRGF0ZS5nZXREYXRlKCkpOwogICAgcXVlcnkuZW5kRGF0ZSA9ICcnICsgZW5kRGF0ZS5nZXRGdWxsWWVhcigpICsgZm9ybWF0RGF0ZShlbmREYXRlLmdldE1vbnRoKCkgKyAxKSArIGZvcm1hdERhdGUoZW5kRGF0ZS5nZXREYXRlKCkpOwogIH0KCiAgcmV0dXJuIGRiLmdldENvbm5lY3Rpb24oc2V0dGluZ3MuTU9OR09fVVJJKS50aGVuKGZ1bmN0aW9uIChfZGIpIHsKICAgIGNvbm5EYiA9IF9kYjsKICAgIHJldHVybiBfZGIuY29sbGVjdGlvbignUGFyc2VBcHAnLCB7IHJlYWRQcmVmZXJlbmNlOiBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUllfUFJFRkVSUkVEIH0pLmZpbmQoe30sIHsgYXBwSWQ6IDEsIG93bmVyOiAxIH0pLnRvQXJyYXkoKS50aGVuKGZ1bmN0aW9uIChhcHBzKSB7CiAgICAgIHJldHVybiBnZXRSZWN1cnNpdmVseShhcHBzKTsKICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICByZXNwb25zZS5hY3RpdmVBcHBzID0gY291bnQ7CiAgICAgIHJlc3BvbnNlLmFjdGl2ZVVzZXJzID0gKDAsIF9rZXlzMi5kZWZhdWx0KSh1c2VycykubGVuZ3RoOwogICAgICBpZiAocXVlcnkucGVyVXNlcnMgPT09IHRydWUpIHsKICAgICAgICByZXNwb25zZS5wZXJVc2VycyA9IHVzZXJzOwogICAgICB9CiAgICAgIHJldHVybiBfZGIuY2xvc2UoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gW3Jlc3BvbnNlXTsKICAgICAgfSk7CiAgICB9KTsKICB9KTsKCiAgZnVuY3Rpb24gZ2V0UmVjdXJzaXZlbHkoYXBwcywgaSkgewogICAgaSA9IGkgPyBpIDogMDsKICAgIHZhciBwYWNpbmcgPSA1MDA7CiAgICB2YXIgc2xpY2VkQXBwcyA9IGFwcHMuc2xpY2UoaSAqIHBhY2luZywgKGkgKyAxKSAqIHBhY2luZyk7CiAgICBpZiAoIXNsaWNlZEFwcHNbMF0pIHJldHVybjsKICAgIHJldHVybiBfcHJvbWlzZTIuZGVmYXVsdC5hbGwoc2xpY2VkQXBwcy5tYXAoZnVuY3Rpb24gKGFwcCkgewogICAgICByZXR1cm4gY29ubkRiLmNvbGxlY3Rpb24oJ1JlcXVlc3RDb3VudGVyJykuY291bnQoewogICAgICAgIF9pZDogeyAnJGd0ZSc6IGFwcC5hcHBJZCArICc6JyArIHF1ZXJ5LmJlZ2luRGF0ZSwgJyRsdCc6IGFwcC5hcHBJZCArICc6JyArIHF1ZXJ5LmVuZERhdGUgfQogICAgICB9LCB7IHJlYWRQcmVmZXJlbmNlOiBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUllfUFJFRkVSUkVEIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHsKICAgICAgICB2YXIgbGVuZ3RoID0gKDAsIF90cnVuYzIuZGVmYXVsdCkoKHF1ZXJ5RGF0ZXMucGFyc2VEYXRlKHF1ZXJ5LmVuZERhdGUpIC0gcXVlcnlEYXRlcy5wYXJzZURhdGUocXVlcnkuYmVnaW5EYXRlKSkgLyA4NjQwMDAwMCk7CiAgICAgICAgaWYgKHJlc3VsdHMgPj0gbGVuZ3RoICYmIGFwcC5vd25lciAmJiBhcHAub3duZXIuaWQpIHsKICAgICAgICAgIHVzZXJzW2FwcC5vd25lci5pZF0gPSB1c2Vyc1thcHAub3duZXIuaWRdID8gdXNlcnNbYXBwLm93bmVyLmlkXSArIDEgOiAxOwogICAgICAgICAgY291bnQrKzsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGNvbnNvbGUuZXJyb3IpOwogICAgfSkpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICBpICs9IDE7CiAgICAgIHJldHVybiBnZXRSZWN1cnNpdmVseShhcHBzLCBpKTsKICAgIH0pOwogIH0KfTsKCmZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSkgewogIGlmIChkYXRlIDwgMTApIHsKICAgIHJldHVybiAnJyArIDAgKyBkYXRlOwogIH0gZWxzZSB7CiAgICByZXR1cm4gZGF0ZTsKICB9Cn0KCm1vZHVsZS5leHBvcnRzLnF1ZXJ5VGVtcGxhdGUgPSB7CiAgYmVnaW5EYXRlOiAnMjAxNzA1MjMnLAogIGVuZERhdGU6ICcyMDE3MDUzMCcsCiAgcGVyVXNlcnM6IGZhbHNlCn07"}},{"text":"getAnalyticsData.js","data":{"code":"data:plain/text;base64,J3VzZSBzdHJpY3QnOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgZ29vZ2xlID0gcmVxdWlyZSgnZ29vZ2xlYXBpcycpOwp2YXIga2V5ID0gcmVxdWlyZSgnLi9iYWNrNGFwcC5qc29uJyk7CnZhciBqd3RDbGllbnQgPSBuZXcgZ29vZ2xlLmF1dGguSldUKGtleS5jbGllbnRfZW1haWwsIG51bGwsIGtleS5wcml2YXRlX2tleSwgWydodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2FuYWx5dGljcy5yZWFkb25seScsICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2FuYWx5dGljcyddLCBudWxsKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRhdGUpIHsKICB2YXIgcmVmZXJlbmNlRGF0ZSA9IGRhdGUgPyBmb3JtYXREYXRlKGRhdGUpIDogJ3llc3RlcmRheSc7CiAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICBqd3RDbGllbnQuYXV0aG9yaXplKGZ1bmN0aW9uIChlcnIsIHRva2VucykgewogICAgICBpZiAoZXJyKSB7CiAgICAgICAgY29uc29sZS5sb2coZXJyKTsKICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7CiAgICAgIH0KCiAgICAgIHZhciBhbmFseXRpY3NSZXBvcnRpbmcgPSBnb29nbGUuYW5hbHl0aWNzcmVwb3J0aW5nKHsKICAgICAgICB2ZXJzaW9uOiAndjQnLAogICAgICAgIGF1dGg6IGp3dENsaWVudAogICAgICB9KTsKCiAgICAgIGFuYWx5dGljc1JlcG9ydGluZy5yZXBvcnRzLmJhdGNoR2V0KHsKICAgICAgICByZXNvdXJjZTogewogICAgICAgICAgJ3JlcG9ydFJlcXVlc3RzJzogW3sKICAgICAgICAgICAgJ3ZpZXdJZCc6ICcxMDY0NDM5NDInLAogICAgICAgICAgICAnZGF0ZVJhbmdlcyc6IFt7CiAgICAgICAgICAgICAgJ3N0YXJ0RGF0ZSc6IHJlZmVyZW5jZURhdGUsCiAgICAgICAgICAgICAgJ2VuZERhdGUnOiByZWZlcmVuY2VEYXRlCiAgICAgICAgICAgIH1dLAogICAgICAgICAgICAnbWV0cmljcyc6IFt7CiAgICAgICAgICAgICAgJ2V4cHJlc3Npb24nOiAnZ2E6c2Vzc2lvbnMnCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAnZXhwcmVzc2lvbic6ICdnYTpuZXdVc2VycycKICAgICAgICAgICAgfV0sCiAgICAgICAgICAgICdkaW1lbnNpb25zJzogW3sKICAgICAgICAgICAgICAnbmFtZSc6ICdnYTpudGhEYXknLAogICAgICAgICAgICAgICdoaXN0b2dyYW1CdWNrZXRzJzogWycwJ10KICAgICAgICAgICAgfV0sCiAgICAgICAgICAgICdvcmRlckJ5cyc6IFt7CiAgICAgICAgICAgICAgJ2ZpZWxkTmFtZSc6ICdnYTpudGhEYXknLAogICAgICAgICAgICAgICdvcmRlclR5cGUnOiAnSElTVE9HUkFNX0JVQ0tFVCcsCiAgICAgICAgICAgICAgJ3NvcnRPcmRlcic6ICdBU0NFTkRJTkcnCiAgICAgICAgICAgIH1dCiAgICAgICAgICB9XQogICAgICAgIH0KICAgICAgfSwgeyB1c2VRdWVyeXN0cmluZzogZmFsc2UgfSwgZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7CiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQucmVwb3J0cyAmJiByZXN1bHQucmVwb3J0c1swXSkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQucmVwb3J0c1swXS5kYXRhLnJvd3NbMF0ubWV0cmljc1swXS52YWx1ZXMpOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICByZWplY3QoJ1dyb25nIHJlcG9ydCBmb3JtYXQnKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVqZWN0KCdXcm9uZyByZXBvcnRzJyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwogIH0pOwp9OwoKZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlKSB7CiAgZGF0ZSA9IGRhdGUuc3Vic3RyKDAsIDQpICsgJy0nICsgZGF0ZS5zdWJzdHIoNCwgMikgKyAnLScgKyBkYXRlLnN1YnN0cig2LCAyKTsKICByZXR1cm4gZGF0ZTsKfQ=="}},{"text":"getAppsPerUser.js","data":{"code":"data:plain/text;base64,J3VzZSBzdHJpY3QnOwoKdmFyIFJlYWRQcmVmZXJlbmNlID0gcmVxdWlyZSgnbW9uZ29kYicpLlJlYWRQcmVmZXJlbmNlOwp2YXIgZGIgPSByZXF1aXJlKCcuLi91dGlsL2RiJyk7CnZhciBzZXR0aW5ncyA9IHJlcXVpcmUoJy4uL3NldHRpbmdzJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VycywgZGF0ZSkgewogIHZhciByZXN1bHQgPSB7fTsKICByZXR1cm4gZGIuZ2V0Q29ubmVjdGlvbihzZXR0aW5ncy5NT05HT19VUkkpLnRoZW4oZnVuY3Rpb24gKF9kYikgewogICAgcmV0dXJuIF9kYi5jb2xsZWN0aW9uKCdQYXJzZUFwcCcsIHsgcmVhZFByZWZlcmVuY2U6IFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWV9QUkVGRVJSRUQgfSkuZmluZCh7CiAgICAgICdvd25lci5pZCc6IHsgJGluOiB1c2VycyB9LAogICAgICAnY3JlYXRlZEF0JzogeyAkbHQ6IGRhdGUgfQogICAgfSwgeyBhcHBJZDogMSwgb3duZXI6IDEgfSkudG9BcnJheSgpLnRoZW4oZnVuY3Rpb24gKGFwcHMpIHsKICAgICAgY29uc29sZS5sb2coJ2dldEFwcHNQZXJVc2VyIFBhcnNlQXBwJyk7CiAgICAgIHZhciBhcHBJZHMgPSBhcHBzLm1hcChmdW5jdGlvbiAoYXBwKSB7CiAgICAgICAgcmV0dXJuIGFwcC5hcHBJZDsKICAgICAgfSk7CiAgICAgIHJldHVybiBfZGIuY29sbGVjdGlvbignUGxhbicsIHsgcmVhZFByZWZlcmVuY2U6IFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWV9QUkVGRVJSRUQgfSkuZmluZCh7CiAgICAgICAgYXBwSWQ6IHsgJGluOiBhcHBJZHMgfSwKICAgICAgICBjb3Vwb25JZDogbnVsbCwKICAgICAgICBwbGFuTmFtZTogeyAkZXhpc3RzOiB0cnVlLCAkbmU6ICdGcmVlIFBsYW4nIH0sCiAgICAgICAgYXBwVHlwZTogJ3BhcnNlJywKICAgICAgICBjcmVhdGVkQXQ6IHsgJGx0OiBkYXRlIH0KICAgICAgfSkudG9BcnJheSgpLnRoZW4oZnVuY3Rpb24gKHBsYW5zKSB7CiAgICAgICAgY29uc29sZS5sb2coJ2dldEFwcHNQZXJVc2VyIFBsYW4nKTsKCiAgICAgICAgcmV0dXJuIHBsYW5zLm1hcChmdW5jdGlvbiAocGxhbikgewogICAgICAgICAgcmV0dXJuIHBsYW4uYXBwSWQ7CiAgICAgICAgfSk7CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHBsYW5zKSB7CiAgICAgICAgcmVzdWx0LnBlclVzZXIgPSB7fTsKICAgICAgICBjb25zb2xlLmxvZygnZ2V0QXBwc1BlclVzZXIgQWZ0ZXIgUGxhbicpOwogICAgICAgIHJldHVybiBhcHBzLmZvckVhY2goZnVuY3Rpb24gKGFwcCkgewogICAgICAgICAgdmFyIGlkID0gYXBwLm93bmVyLmlkOwogICAgICAgICAgcmVzdWx0LnBlclVzZXJbaWRdID0gcmVzdWx0LnBlclVzZXJbaWRdIHx8IHsgYXBwczogMCwgcGxhbnM6IDAgfTsKICAgICAgICAgIHJlc3VsdC5wZXJVc2VyW2lkXS5hcHBzICs9IDE7CiAgICAgICAgICByZXN1bHQucGVyVXNlcltpZF0ucGxhbnMgKz0gcGxhbnMuaW5kZXhPZihhcHAuYXBwSWQpID49IDAgPyAxIDogMDsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgY29uc29sZS5sb2coJ2dldEFwcHNQZXJVc2VyIGVuZCcpOwogICAgICByZXR1cm4gX2RiLmNsb3NlKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfSk7CiAgICB9KTsKICB9KTsKfTs="}},{"text":"getB4aUsers.js","data":{"code":"data:plain/text;base64,J3VzZSBzdHJpY3QnOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgUmVhZFByZWZlcmVuY2UgPSByZXF1aXJlKCdtb25nb2RiJykuUmVhZFByZWZlcmVuY2U7CnZhciBkYiA9IHJlcXVpcmUoJy4uL3V0aWwvZGInKTsKdmFyIHNldHRpbmdzID0gcmVxdWlyZSgnLi4vc2V0dGluZ3MnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgewogIHJldHVybiBkYi5nZXRDb25uZWN0aW9uKHNldHRpbmdzLkFQUF9NT05HT19VUkkpLnRoZW4oZnVuY3Rpb24gKF9kYikgewogICAgcmV0dXJuIF9kYi5jb2xsZWN0aW9uKCdCNGFVc2VyJywgeyByZWFkUHJlZmVyZW5jZTogUmVhZFByZWZlcmVuY2UuU0VDT05EQVJZX1BSRUZFUlJFRCB9KS5maW5kKHt9LCB7IGludGVybmFsX2lkOiAxIH0pLnRvQXJyYXkoKS50aGVuKGZ1bmN0aW9uICh1c2VycykgewogICAgICB2YXIgdXNlcklkcyA9IHVzZXJzLm1hcChmdW5jdGlvbiAodXNlcikgewogICAgICAgIHJldHVybiB1c2VyWydpbnRlcm5hbF9pZCddOwogICAgICB9KTsKICAgICAgcmV0dXJuIGRiLmdldENvbm5lY3Rpb24oc2V0dGluZ3MuTU9OR09fVVJJKS50aGVuKGZ1bmN0aW9uIChfZGIyKSB7CiAgICAgICAgcmV0dXJuIF9kYjIuY29sbGVjdGlvbignVXNlcicsIHsgcmVhZFByZWZlcmVuY2U6IFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWV9QUkVGRVJSRUQgfSkuZmluZCh7CiAgICAgICAgICBfaWQ6IHsgJG5pbjogdXNlcklkcyB9CiAgICAgICAgfSwgewogICAgICAgICAgZW1haWw6IDEsCiAgICAgICAgICBjcmVhdGVkQXQ6IDEsCiAgICAgICAgICByZWZlcmVyOiAxLAogICAgICAgICAgZ2NsaWQ6IDEsCiAgICAgICAgICB1dG1fc291cmNlOiAxLAogICAgICAgICAgdXRtX21lZGl1bTogMSwKICAgICAgICAgIHV0bV9jYW1wYWlnbjogMSwKICAgICAgICAgIHV0bV90ZXJtOiAxLAogICAgICAgICAgdXRtX2NvbnRlbnQ6IDEKICAgICAgICB9KS50b0FycmF5KCkudGhlbihmdW5jdGlvbiAoYjRhVXNlcnMpIHsKICAgICAgICAgIC8vIHJldHVybiBiNGFVc2Vycy5tYXAoZnVuY3Rpb24gKHVzZXIpIHsKICAgICAgICAgIC8vICAgcmV0dXJuIHVzZXJbJ2ludGVybmFsX2lkJ107CiAgICAgICAgICAvLyB9KTsKICAgICAgICAgIHJldHVybiBiNGFVc2VyczsKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7CiAgICAgICAgICByZXR1cm4gX2RiLmNsb3NlKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBfZGIyLmNsb3NlKCk7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KTsKICB9KTsKfTsKCm1vZHVsZS5leHBvcnRzLmdldEFsbEludGVybmFsVXNlcnMgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIGRiLmdldENvbm5lY3Rpb24oc2V0dGluZ3MuTU9OR09fVVJJKS50aGVuKGZ1bmN0aW9uIChfZGIyKSB7CiAgICByZXR1cm4gX2RiMi5jb2xsZWN0aW9uKCdVc2VyJywgeyByZWFkUHJlZmVyZW5jZTogUmVhZFByZWZlcmVuY2UuU0VDT05EQVJZX1BSRUZFUlJFRCB9KS5maW5kKCkudG9BcnJheSgpOwogIH0pOwp9OwoKbW9kdWxlLmV4cG9ydHMuZ2V0QWxsQ29ob3J0VXNlcnMgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIGRiLmdldENvbm5lY3Rpb24oc2V0dGluZ3MuQVBQX01PTkdPX1VSSSkudGhlbihmdW5jdGlvbiAoX2RiMikgewogICAgcmV0dXJuIF9kYjIuY29sbGVjdGlvbignQjRhVXNlcicsIHsgcmVhZFByZWZlcmVuY2U6IFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWV9QUkVGRVJSRUQgfSkuZmluZCgpLnRvQXJyYXkoKTsKICB9KTsKfTsKCm1vZHVsZS5leHBvcnRzLmdldEFsbENvaG9ydFVzZXJzID0gZnVuY3Rpb24gKCkgewogIHJldHVybiBkYi5nZXRDb25uZWN0aW9uKHNldHRpbmdzLkFQUF9NT05HT19VUkkpLnRoZW4oZnVuY3Rpb24gKF9kYjIpIHsKICAgIHJldHVybiBfZGIyLmNvbGxlY3Rpb24oJ0I0YVVzZXInLCB7IHJlYWRQcmVmZXJlbmNlOiBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUllfUFJFRkVSUkVEIH0pLmZpbmQoKS50b0FycmF5KCk7CiAgfSk7Cn07Cgptb2R1bGUuZXhwb3J0cy5nZXRBbGxHb29nbGVBbmFseXRjc0RhdGEgPSBmdW5jdGlvbiAoZ2NsSWRzKSB7CiAgcmV0dXJuIGRiLmdldENvbm5lY3Rpb24oc2V0dGluZ3MuQVBQX01PTkdPX1VSSSkudGhlbihmdW5jdGlvbiAoX2RiMikgewogICAgcmV0dXJuIF9kYjIuY29sbGVjdGlvbignR29vZ2xlQWR3b3Jkc0RhdGEnLCB7IHJlYWRQcmVmZXJlbmNlOiBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUllfUFJFRkVSUkVEIH0pLmZpbmQoeyBHY2xJZDogeyAkaW46IGdjbElkcyB9IH0sIHsgR2NsSWQ6IDEsIENhbXBhaWduSWQ6IDEsIENhbXBhaWduTmFtZTogMSB9KS50b0FycmF5KCk7CiAgfSk7Cn07Cgptb2R1bGUuZXhwb3J0cy51cGRhdGVDb2hvcnRVc2VycyA9IGZ1bmN0aW9uICh1c2VycykgewogIGlmICghdXNlcnMgfHwgIXVzZXJzLmxlbmd0aCkgcmV0dXJuIF9wcm9taXNlMi5kZWZhdWx0LnJlc29sdmUoe30pOwogIHJldHVybiBkYi5nZXRDb25uZWN0aW9uKHNldHRpbmdzLkFQUF9NT05HT19VUkkpLnRoZW4oZnVuY3Rpb24gKF9kYjIpIHsKICAgIHZhciBjb2wgPSBfZGIyLmNvbGxlY3Rpb24oJ0I0YVVzZXInLCB7IHJlYWRQcmVmZXJlbmNlOiBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUllfUFJFRkVSUkVEIH0pOwogICAgdmFyIGJhdGNoID0gY29sLmluaXRpYWxpemVVbm9yZGVyZWRCdWxrT3AoeyB1c2VMZWdhY3lPcHM6IHRydWUgfSk7CiAgICB1c2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh1KSB7CiAgICAgIGJhdGNoLmZpbmQoeyBfaWQ6IHUuX2lkIH0pLnVwZGF0ZU9uZSh7ICRzZXQ6IHUgfSk7CiAgICB9KTsKICAgIHJldHVybiBiYXRjaC5leGVjdXRlKCk7CiAgfSk7Cn07Cgptb2R1bGUuZXhwb3J0cy5nZXREaXN0aW5jdFNvdXJjZXMgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIGRiLmdldENvbm5lY3Rpb24oc2V0dGluZ3MuQVBQX01PTkdPX1VSSSkudGhlbihmdW5jdGlvbiAoX2RiMikgewogICAgcmV0dXJuIF9kYjIuY29sbGVjdGlvbignQjRhVXNlcicsIHsgcmVhZFByZWZlcmVuY2U6IFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWV9QUkVGRVJSRUQgfSkuZGlzdGluY3QoJ3V0bV9zb3VyY2UnKTsKICB9KTsKfTsKCm1vZHVsZS5leHBvcnRzLmdldERpc3RpbmN0Q2FtcGFpZ25zID0gZnVuY3Rpb24gKCkgewogIHJldHVybiBkYi5nZXRDb25uZWN0aW9uKHNldHRpbmdzLkFQUF9NT05HT19VUkkpLnRoZW4oZnVuY3Rpb24gKF9kYjIpIHsKICAgIHJldHVybiBfZGIyLmNvbGxlY3Rpb24oJ0I0YVVzZXInLCB7IHJlYWRQcmVmZXJlbmNlOiBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUllfUFJFRkVSUkVEIH0pLmRpc3RpbmN0KCd1dG1fY2FtcGFpZ24nKTsKICB9KTsKfTsKCm1vZHVsZS5leHBvcnRzLmdldERpc3RpbmN0VGVybXMgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIGRiLmdldENvbm5lY3Rpb24oc2V0dGluZ3MuQVBQX01PTkdPX1VSSSkudGhlbihmdW5jdGlvbiAoX2RiMikgewogICAgcmV0dXJuIF9kYjIuY29sbGVjdGlvbignQjRhVXNlcicsIHsgcmVhZFByZWZlcmVuY2U6IFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWV9QUkVGRVJSRUQgfSkuZGlzdGluY3QoJ3V0bV90ZXJtJyk7CiAgfSk7Cn07Cgptb2R1bGUuZXhwb3J0cy5nZXREaXN0aW5jdE1lZGl1bXMgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIGRiLmdldENvbm5lY3Rpb24oc2V0dGluZ3MuQVBQX01PTkdPX1VSSSkudGhlbihmdW5jdGlvbiAoX2RiMikgewogICAgcmV0dXJuIF9kYjIuY29sbGVjdGlvbignQjRhVXNlcicsIHsgcmVhZFByZWZlcmVuY2U6IFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWV9QUkVGRVJSRUQgfSkuZGlzdGluY3QoJ3V0bV9tZWRpdW0nKTsKICB9KTsKfTsKCm1vZHVsZS5leHBvcnRzLmdldERpc3RpbmN0Q29udGVudHMgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIGRiLmdldENvbm5lY3Rpb24oc2V0dGluZ3MuQVBQX01PTkdPX1VSSSkudGhlbihmdW5jdGlvbiAoX2RiMikgewogICAgcmV0dXJuIF9kYjIuY29sbGVjdGlvbignQjRhVXNlcicsIHsgcmVhZFByZWZlcmVuY2U6IFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWV9QUkVGRVJSRUQgfSkuZGlzdGluY3QoJ3V0bV9jb250ZW50Jyk7CiAgfSk7Cn07"}},{"text":"getCreatedApps.js","data":{"code":"data:plain/text;base64,J3VzZSBzdHJpY3QnOwoKdmFyIFJlYWRQcmVmZXJlbmNlID0gcmVxdWlyZSgnbW9uZ29kYicpLlJlYWRQcmVmZXJlbmNlOwoKdmFyIGRiID0gcmVxdWlyZSgnLi4vdXRpbC9kYicpOwp2YXIgcXVlcnlEYXRlcyA9IHJlcXVpcmUoJy4uL3V0aWwvcXVlcnlEYXRlcycpOwp2YXIgc2V0dGluZ3MgPSByZXF1aXJlKCcuLi9zZXR0aW5ncycpOwoKY29uc29sZS5sb2coc2V0dGluZ3MpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaWQsIF9xdWVyeSkgewogIHZhciBxdWVyeTsKICB0cnkgewogICAgcXVlcnkgPSBKU09OLnBhcnNlKF9xdWVyeSk7CiAgfSBjYXRjaCAoZSkgewogICAgcXVlcnkgPSBfcXVlcnk7CiAgfQoKICBxdWVyeSA9IHF1ZXJ5RGF0ZXMucGFyc2VRdWVyeURhdGVzKHF1ZXJ5KTsKCiAgdmFyIHJlc3BvbnNlID0geyAncXVlcnknOiBxdWVyeSB9OwoKICByZXR1cm4gZGIuZ2V0Q29ubmVjdGlvbihzZXR0aW5ncy5NT05HT19VUkkpLnRoZW4oZnVuY3Rpb24gKF9kYikgewogICAgcmV0dXJuIF9kYi5jb2xsZWN0aW9uKCdQYXJzZUFwcCcsIHsgcmVhZFByZWZlcmVuY2U6IFJlYWRQcmVmZXJlbmNlLlNFQ09OREFSWV9QUkVGRVJSRUQgfSkuZmluZCh7CiAgICAgIGNyZWF0ZWRBdDogewogICAgICAgICRndGU6IHF1ZXJ5LmJlZ2luRGF0ZSwKICAgICAgICAkbHQ6IHF1ZXJ5LmVuZERhdGUKICAgICAgfQogICAgfSkudG9BcnJheSgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHsKICAgICAgcmVzcG9uc2UuY3JlYXRlZEFwcHMgPSByZXN1bHRzLmxlbmd0aDsKICAgICAgaWYgKHF1ZXJ5LnBlclVzZXJzID09PSB0cnVlKSB7CiAgICAgICAgcmVzcG9uc2UucGVyVXNlciA9IHt9OwogICAgICAgIHJldHVybiByZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKGFwcCkgewogICAgICAgICAgdmFyIGlkID0gYXBwLm93bmVyLmlkOwogICAgICAgICAgcmVzcG9uc2UucGVyVXNlcltpZF0gPSByZXNwb25zZS5wZXJVc2VyW2lkXSA/IHJlc3BvbnNlLnBlclVzZXJbaWRdICsgMSA6IDE7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gX2RiLmNvbGxlY3Rpb24oJ1BhcnNlQXBwJykuY291bnQoewogICAgICAgIGNyZWF0ZWRBdDogeyAkbHQ6IHF1ZXJ5LmVuZERhdGUgfQogICAgICB9LCB7IHJlYWRQcmVmZXJlbmNlOiBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUllfUFJFRkVSUkVEIH0pOwogICAgfSkudGhlbihmdW5jdGlvbiAoY291bnRUb3RhbCkgewogICAgICByZXNwb25zZS5hcHBzVG90YWxQZXJpb2QgPSBjb3VudFRvdGFsOwogICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBfZGIuY29sbGVjdGlvbignUGFyc2VBcHAnKS5jb3VudCh7fSwgeyByZWFkUHJlZmVyZW5jZTogUmVhZFByZWZlcmVuY2UuU0VDT05EQVJZX1BSRUZFUlJFRCB9KTsKICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvdW50VG90YWwpIHsKICAgICAgcmVzcG9uc2UuYXBwc1RvdGFsID0gY291bnRUb3RhbDsKICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gX2RiLmNsb3NlKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIFtyZXNwb25zZV07CiAgICAgIH0pOwogICAgfSk7CiAgfSkuY2F0Y2goY29uc29sZS5sb2cpOwp9Ow=="}},{"text":"getCreatedPlans.js","data":{"code":"data:plain/text;base64,J3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9tb25nb2RiID0gcmVxdWlyZSgnbW9uZ29kYicpOwoKdmFyIF9tb25nb2RiMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vbmdvZGIpOwoKdmFyIF9kYjIgPSByZXF1aXJlKCcuLi91dGlsL2RiJyk7Cgp2YXIgZGIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfZGIyKTsKCnZhciBfcXVlcnlEYXRlcyA9IHJlcXVpcmUoJy4uL3V0aWwvcXVlcnlEYXRlcycpOwoKdmFyIHF1ZXJ5RGF0ZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfcXVlcnlEYXRlcyk7Cgp2YXIgX3NldHRpbmdzID0gcmVxdWlyZSgnLi4vc2V0dGluZ3MnKTsKCnZhciBfc2V0dGluZ3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0dGluZ3MpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpleHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoaWQsIF9xdWVyeSkgewogIHZhciBxdWVyeTsKICB0cnkgewogICAgcXVlcnkgPSBKU09OLnBhcnNlKF9xdWVyeSk7CiAgfSBjYXRjaCAoZSkgewogICAgcXVlcnkgPSBfcXVlcnk7CiAgfQoKICBxdWVyeSA9IHF1ZXJ5RGF0ZXMucGFyc2VRdWVyeURhdGVzKHF1ZXJ5KTsKCiAgdmFyIHJlc3BvbnNlID0geyAncXVlcnknOiBxdWVyeSB9OwoKICByZXR1cm4gZGIuZ2V0Q29ubmVjdGlvbihfc2V0dGluZ3MyLmRlZmF1bHQuTU9OR09fVVJJKS50aGVuKGZ1bmN0aW9uIChfZGIpIHsKICAgIHJldHVybiBfZGIuY29sbGVjdGlvbignUGxhbicsIHsgcmVhZFByZWZlcmVuY2U6IF9tb25nb2RiMi5kZWZhdWx0LlNFQ09OREFSWV9QUkVGRVJSRUQgfSkuZmluZCh7CiAgICAgIGNyZWF0ZWRBdDogeyAkZ3RlOiBxdWVyeS5iZWdpbkRhdGUsICRsdDogcXVlcnkuZW5kRGF0ZSB9LAogICAgICBjb3Vwb25JZDogbnVsbCwKICAgICAgcGxhbk5hbWU6IHsgJGV4aXN0czogdHJ1ZSwgJG5vdDogL0ZyZWUvIH0sCiAgICAgIGFwcFR5cGU6ICdwYXJzZScKICAgIH0pLnRvQXJyYXkoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7CiAgICAgIHJlc3BvbnNlLmNyZWF0ZWRQbGFucyA9IHJlc3VsdHMubGVuZ3RoOwogICAgICBpZiAocXVlcnkucGVyVXNlcnMgPT09IHRydWUpIHsKICAgICAgICByZXR1cm4gcmVzdWx0cy5tYXAoZnVuY3Rpb24gKHBsYW4pIHsKICAgICAgICAgIHJldHVybiBwbGFuLmFwcElkOwogICAgICAgIH0pOwogICAgICB9CiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdHMpKSB7CiAgICAgICAgcmV0dXJuIF9kYi5jb2xsZWN0aW9uKCdQYXJzZUFwcCcsIHsgcmVhZFByZWZlcmVuY2U6IF9tb25nb2RiMi5kZWZhdWx0LlNFQ09OREFSWV9QUkVGRVJSRUQgfSkuZmluZCh7CiAgICAgICAgICBhcHBJZDogeyAkaW46IHJlc3VsdHMgfQogICAgICAgIH0pLnRvQXJyYXkoKS50aGVuKGZ1bmN0aW9uIChfcmVzdWx0cykgewogICAgICAgICAgcmVzcG9uc2UucGVyVXNlciA9IHt9OwogICAgICAgICAgcmV0dXJuIF9yZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKGFwcCkgewogICAgICAgICAgICB2YXIgaWQgPSBhcHAub3duZXIuaWQ7CiAgICAgICAgICAgIHJlc3BvbnNlLnBlclVzZXJbaWRdID0gcmVzcG9uc2UucGVyVXNlcltpZF0gPyByZXNwb25zZS5wZXJVc2VyW2lkXSArIDEgOiAxOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gX2RiLmNvbGxlY3Rpb24oJ1BsYW4nKS5jb3VudCh7CiAgICAgICAgY3JlYXRlZEF0OiB7ICRsdDogcXVlcnkuZW5kRGF0ZSB9LAogICAgICAgIGNvdXBvbklkOiBudWxsLAogICAgICAgIHBsYW5OYW1lOiB7ICRleGlzdHM6IHRydWUsICRub3Q6IC9GcmVlLyB9LAogICAgICAgIGFwcFR5cGU6ICdwYXJzZScKICAgICAgfSwgeyByZWFkUHJlZmVyZW5jZTogX21vbmdvZGIyLmRlZmF1bHQuU0VDT05EQVJZX1BSRUZFUlJFRCB9KTsKICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvdW50VG90YWwpIHsKICAgICAgcmVzcG9uc2UucGxhbnNUb3RhbFBlcmlvZCA9IGNvdW50VG90YWw7CiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIF9kYi5jb2xsZWN0aW9uKCdQbGFuJykuY291bnQoewogICAgICAgIGNvdXBvbklkOiBudWxsLAogICAgICAgIHBsYW5OYW1lOiB7ICRleGlzdHM6IHRydWUsICRub3Q6IC9GcmVlLyB9LAogICAgICAgIGFwcFR5cGU6ICdwYXJzZScKICAgICAgfSwgeyByZWFkUHJlZmVyZW5jZTogX21vbmdvZGIyLmRlZmF1bHQuU0VDT05EQVJZX1BSRUZFUlJFRCB9KTsKICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvdW50VG90YWwpIHsKICAgICAgcmVzcG9uc2UucGxhbnNUb3RhbCA9IGNvdW50VG90YWw7CiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIF9kYi5jbG9zZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBbcmVzcG9uc2VdOwogICAgICB9KTsKICAgIH0pOwogIH0pLmNhdGNoKGNvbnNvbGUubG9nKTsKfTsKCm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOw=="}},{"text":"getReportDailyUser.js","data":{"code":"data:plain/text;base64,J3VzZSBzdHJpY3QnOwoKdmFyIF9yZWdlbmVyYXRvciA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3InKTsKCnZhciBfcmVnZW5lcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVnZW5lcmF0b3IpOwoKdmFyIF9hc3luY1RvR2VuZXJhdG9yMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yJyk7Cgp2YXIgX2FzeW5jVG9HZW5lcmF0b3IzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXN5bmNUb0dlbmVyYXRvcjIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBkYiA9IHJlcXVpcmUoJy4uL3V0aWwvZGInKTsKdmFyIHNldHRpbmdzID0gcmVxdWlyZSgnLi4vc2V0dGluZ3MnKTsKdmFyIFJlcG9ydF9EYWlseV9Vc2VyID0gJ1JlcG9ydF9EYWlseV9Vc2VyJzsKCm1vZHVsZS5leHBvcnRzLmFnZ3JlZ2F0ZURhdGFQZXJSZWZlcmVuY2VEYXRlID0gZnVuY3Rpb24gKCkgewogIHZhciBfcmVmID0gKDAsIF9hc3luY1RvR2VuZXJhdG9yMy5kZWZhdWx0KSggLyojX19QVVJFX18qL19yZWdlbmVyYXRvcjIuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoZGF0ZUJlZ2luLCBkYXRlRW5kLCB1c2VycykgewogICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIGRiLmdldENvbm5lY3Rpb24oc2V0dGluZ3MuQVBQX01PTkdPX1VSSSkudGhlbihmdW5jdGlvbiAoX2RiMikgewogICAgICAgICAgICAgIHJldHVybiBfZGIyLmNvbGxlY3Rpb24oUmVwb3J0X0RhaWx5X1VzZXIpLmFnZ3JlZ2F0ZShbewogICAgICAgICAgICAgICAgJyRtYXRjaCc6IHsKICAgICAgICAgICAgICAgICAgJ3JlZmVyZW5jZV9kYXRlJzogewogICAgICAgICAgICAgICAgICAgICckZ3RlJzogZGF0ZUJlZ2luLAogICAgICAgICAgICAgICAgICAgICckbHQnOiBkYXRlRW5kCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICdfcF91c2VyJzogewogICAgICAgICAgICAgICAgICAgICckaW4nOiB1c2VycwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIiRwcm9qZWN0IjogewogICAgICAgICAgICAgICAgICAicmVmZXJlbmNlX2RhdGUiOiAxLjAsCiAgICAgICAgICAgICAgICAgICJhY3RpdmVfYXBwcyI6IDEuMCwKICAgICAgICAgICAgICAgICAgIm5ld19wbGFucyI6IDEuMCwKICAgICAgICAgICAgICAgICAgIm5ld19hcHBzIjogMS4wLAogICAgICAgICAgICAgICAgICAiYXBwc190b3RhbCI6IDEuMCwKICAgICAgICAgICAgICAgICAgInBsYW5zX3RvdGFsIjogMS4wLAogICAgICAgICAgICAgICAgICAiYXBpX2NhbGxzIjogMS4wLAogICAgICAgICAgICAgICAgICAiYWN0aXZlX3VzZXJzIjogewogICAgICAgICAgICAgICAgICAgICIkY29uZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICJpZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgIiRndCI6IFsiJGFjdGl2ZV9hcHBzIiwgMC4wXQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICJ0aGVuIjogMSwKICAgICAgICAgICAgICAgICAgICAgICJlbHNlIjogMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICIkZ3JvdXAiOiB7CiAgICAgICAgICAgICAgICAgICJfaWQiOiAiJHJlZmVyZW5jZV9kYXRlIiwKICAgICAgICAgICAgICAgICAgImFjdGl2ZV9hcHBzIjogewogICAgICAgICAgICAgICAgICAgICIkc3VtIjogIiRhY3RpdmVfYXBwcyIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgIm5ld19wbGFucyI6IHsKICAgICAgICAgICAgICAgICAgICAiJHN1bSI6ICIkbmV3X3BsYW5zIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAibmV3X2FwcHMiOiB7CiAgICAgICAgICAgICAgICAgICAgIiRzdW0iOiAiJG5ld19hcHBzIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAiYXBwc190b3RhbCI6IHsKICAgICAgICAgICAgICAgICAgICAiJHN1bSI6ICIkYXBwc190b3RhbCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgInBsYW5zX3RvdGFsIjogewogICAgICAgICAgICAgICAgICAgICIkc3VtIjogIiRwbGFuc190b3RhbCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgImFwaV9jYWxscyI6IHsKICAgICAgICAgICAgICAgICAgICAiJHN1bSI6ICIkYXBpX2NhbGxzIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAiYWN0aXZlX3VzZXJzIjogewogICAgICAgICAgICAgICAgICAgICIkc3VtIjogIiRhY3RpdmVfdXNlcnMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9XSwgewogICAgICAgICAgICAgICAgImFsbG93RGlza1VzZSI6IHRydWUKICAgICAgICAgICAgICB9KS50b0FycmF5KCk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywgX2NvbnRleHQuc2VudCk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgY2FzZSAnZW5kJzoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUsIHVuZGVmaW5lZCk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gKF94LCBfeDIsIF94MykgewogICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7Cgptb2R1bGUuZXhwb3J0cy5nZXRVbm9yZGVyZWRCdWxrID0gKDAsIF9hc3luY1RvR2VuZXJhdG9yMy5kZWZhdWx0KSggLyojX19QVVJFX18qL19yZWdlbmVyYXRvcjIuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogIHZhciBfZGIsIHJlcG9ydERhaWx5VXNlcjsKCiAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgIHdoaWxlICgxKSB7CiAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgIHJldHVybiBkYi5nZXRDb25uZWN0aW9uKHNldHRpbmdzLkFQUF9NT05HT19VUkkpOwoKICAgICAgICBjYXNlIDI6CiAgICAgICAgICBfZGIgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTsKICAgICAgICAgIHJldHVybiBfZGIuY29sbGVjdGlvbihSZXBvcnRfRGFpbHlfVXNlcik7CgogICAgICAgIGNhc2UgNToKICAgICAgICAgIHJlcG9ydERhaWx5VXNlciA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA4OwogICAgICAgICAgcmV0dXJuIHJlcG9ydERhaWx5VXNlci5pbml0aWFsaXplVW5vcmRlcmVkQnVsa09wKCk7CgogICAgICAgIGNhc2UgODoKICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCdyZXR1cm4nLCBfY29udGV4dDIuc2VudCk7CgogICAgICAgIGNhc2UgOToKICAgICAgICBjYXNlICdlbmQnOgogICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgIH0KICAgIH0KICB9LCBfY2FsbGVlMiwgdW5kZWZpbmVkKTsKfSkpOw=="}},{"text":"getStepCohort.js","data":{"code":"data:plain/text;base64,J3VzZSBzdHJpY3QnOwoKZnVuY3Rpb24gc3RlcENvaG9ydFJlcG9ydChjb2hvcnRJbml0LCBjb2hvcnRFbmQsIHBlcmlvZEluaXQsIHBlcmlvZEVuZCwgc3RlcCkgewogIHZhciBSZXBvcnRfRGFpbHlfVXNlciA9IFBhcnNlLk9iamVjdC5leHRlbmQoJ1JlcG9ydF9EYWlseV9Vc2VyJyk7CiAgdmFyIEI0YVVzZXIgPSBQYXJzZS5PYmplY3QuZXh0ZW5kKCdCNGFVc2VyJyk7CgogIGNvbnNvbGUubG9nKCdzdGVwQ29ob3J0UmVwb3J0ID0+JywgYXJndW1lbnRzKTsKCiAgY29ob3J0SW5pdCA9IG5ldyBEYXRlKGNvaG9ydEluaXQpOwogIGNvaG9ydEVuZCA9IG5ldyBEYXRlKGNvaG9ydEVuZCk7CiAgcGVyaW9kSW5pdCA9IG5ldyBEYXRlKHBlcmlvZEluaXQpOwogIHBlcmlvZEVuZCA9IG5ldyBEYXRlKHBlcmlvZEVuZCk7CgogIHZhciBjb2hvcnRSZXN1bHQgPSB7fTsKCiAgdmFyIGNvaG9ydFVzZXJzID0ge307CgogIHZhciBjdXJyZW50UGVyaW9kID0gcGVyaW9kRW5kOwoKICByZXR1cm4gaXRlcmF0aW9uVGhyb3VnaFBlcmlvZChjdXJyZW50UGVyaW9kLCBjb2hvcnRVc2VycywgY29ob3J0UmVzdWx0KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgY29uc29sZS5sb2coZS5zdGFjayk7CiAgfSk7CgogIGZ1bmN0aW9uIGl0ZXJhdGlvblRocm91Z2hQZXJpb2QoY3VycmVudFBlcmlvZCwgY29ob3J0VXNlcnMsIGNvaG9ydFJlc3VsdCkgewogICAgY29uc29sZS5sb2coJ2N1cnJlbnRQZXJpb2QnLCBkYXRlVG9TdHJpbmcoY3VycmVudFBlcmlvZCksICdwZXJpb2RJbml0JywgZGF0ZVRvU3RyaW5nKHBlcmlvZEluaXQpKTsKICAgIGlmIChjdXJyZW50UGVyaW9kID49IHBlcmlvZEluaXQpIHsKICAgICAgY29ob3J0UmVzdWx0W2RhdGVUb1N0cmluZyhjdXJyZW50UGVyaW9kKV0gPSB7fTsKICAgICAgdmFyIGN1cnJlbnRDb2hvcnQgPSBjb2hvcnRFbmQ7CiAgICAgIHJldHVybiBpdGVyYXRpb25UaHJvdWdoQ29ob3J0KGN1cnJlbnRQZXJpb2QsIGN1cnJlbnRDb2hvcnQpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIGN1cnJlbnRQZXJpb2QgPSBhZGREYXkoY3VycmVudFBlcmlvZCwgLTEpOwogICAgICAgIHJldHVybiBpdGVyYXRpb25UaHJvdWdoUGVyaW9kKGN1cnJlbnRQZXJpb2QsIGNvaG9ydFVzZXJzLCBjb2hvcnRSZXN1bHQpOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBQYXJzZS5Qcm9taXNlLnJlc29sdmUoY29ob3J0UmVzdWx0KTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGl0ZXJhdGlvblRocm91Z2hDb2hvcnQoY3VycmVudFBlcmlvZCwgY3VycmVudENvaG9ydCkgewogICAgaWYgKGN1cnJlbnRDb2hvcnQgPj0gY29ob3J0SW5pdCkgewogICAgICByZXR1cm4gZ2V0Q29ob3J0VXNlcnMoY3VycmVudENvaG9ydCwgY29ob3J0VXNlcnMpLnRoZW4oZnVuY3Rpb24gKGNvaG9ydFVzZXJzKSB7CiAgICAgICAgaWYgKGN1cnJlbnRQZXJpb2QgPj0gY3VycmVudENvaG9ydCkgewogICAgICAgICAgcmV0dXJuIGdldEFjdGl2ZVVzZXJzKGN1cnJlbnRQZXJpb2QsIGNvaG9ydFVzZXJzW2N1cnJlbnRDb2hvcnRdKS50aGVuKGZ1bmN0aW9uIChhY3RpdmVVc2VycykgewogICAgICAgICAgICBjb2hvcnRSZXN1bHRbZGF0ZVRvU3RyaW5nKGN1cnJlbnRQZXJpb2QpXVtkYXRlVG9TdHJpbmcoY3VycmVudENvaG9ydCldID0gewogICAgICAgICAgICAgIGNvaG9ydFVzZXJzOiBjb2hvcnRVc2Vyc1tjdXJyZW50Q29ob3J0XS5sZW5ndGgsCiAgICAgICAgICAgICAgYWN0aXZlVXNlcnM6IGFjdGl2ZVVzZXJzLmxlbmd0aCwKICAgICAgICAgICAgICBwcm9wb3J0aW9uOiBNYXRoLnJvdW5kKGFjdGl2ZVVzZXJzLmxlbmd0aCAqIDEwMDAwLjAgLyAoY29ob3J0VXNlcnNbY3VycmVudENvaG9ydF0ubGVuZ3RoICogMS4wKSkgLyAxMDAwMC4wCiAgICAgICAgICAgIH07CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIGN1cnJlbnRDb2hvcnQgPSBhZGREYXkoY3VycmVudENvaG9ydCwgLTEpOwogICAgICAgIHJldHVybiBpdGVyYXRpb25UaHJvdWdoQ29ob3J0KGN1cnJlbnRQZXJpb2QsIGN1cnJlbnRDb2hvcnQpOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBQYXJzZS5Qcm9taXNlLnJlc29sdmUoY29ob3J0UmVzdWx0KTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGdldENvaG9ydFVzZXJzKGN1cnJlbnRDb2hvcnQsIGNvaG9ydFVzZXJzKSB7CiAgICBpZiAoY29ob3J0VXNlcnNbY3VycmVudENvaG9ydF0pIHsKICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UucmVzb2x2ZShjb2hvcnRVc2Vycyk7CiAgICB9IGVsc2UgewogICAgICB2YXIgY3VycmVudENvaG9ydFVzZXJzID0gW107CiAgICAgIHZhciBxdWVyeV91c2VyID0gbmV3IFBhcnNlLlF1ZXJ5KEI0YVVzZXIpOwoKICAgICAgcXVlcnlfdXNlci5ncmVhdGVyVGhhbk9yRXF1YWxUbygnb3JpZ2luYWxfY3JlYXRlZF9hdCcsIGN1cnJlbnRDb2hvcnQpOwogICAgICBxdWVyeV91c2VyLmxlc3NUaGFuKCdvcmlnaW5hbF9jcmVhdGVkX2F0JywgYWRkRGF5KGN1cnJlbnRDb2hvcnQpKTsKCiAgICAgIHJldHVybiBxdWVyeV91c2VyLmVhY2goZnVuY3Rpb24gKHVzZXIpIHsKICAgICAgICBjdXJyZW50Q29ob3J0VXNlcnMucHVzaCh1c2VyKTsKICAgICAgfSwgeyB1c2VNYXN0ZXJLZXk6IHRydWUgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgY29ob3J0VXNlcnNbY3VycmVudENvaG9ydF0gPSBjdXJyZW50Q29ob3J0VXNlcnM7CiAgICAgICAgcmV0dXJuIGNvaG9ydFVzZXJzOwogICAgICB9KTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGdldEFjdGl2ZVVzZXJzKGN1cnJlbnRQZXJpb2QsIGN1cnJlbnRDb2hvcnRVc2VycykgewogICAgdmFyIGFjdGl2ZVVzZXJzID0gW107CiAgICB2YXIgcXVlcnlfZGFpbHkgPSBuZXcgUGFyc2UuUXVlcnkoUmVwb3J0X0RhaWx5X1VzZXIpOwoKICAgIHF1ZXJ5X2RhaWx5LmdyZWF0ZXJUaGFuT3JFcXVhbFRvKCdyZWZlcmVuY2VfZGF0ZScsIGN1cnJlbnRQZXJpb2QpOwogICAgcXVlcnlfZGFpbHkubGVzc1RoYW4oJ3JlZmVyZW5jZV9kYXRlJywgYWRkRGF5KGN1cnJlbnRQZXJpb2QpKTsKICAgIHF1ZXJ5X2RhaWx5LmNvbnRhaW5lZEluKCd1c2VyJywgY3VycmVudENvaG9ydFVzZXJzKTsKICAgIHF1ZXJ5X2RhaWx5LmdyZWF0ZXJUaGFuKCdhcGlfY2FsbHMnLCAwKTsKICAgIHF1ZXJ5X2RhaWx5LmluY2x1ZGUoJ3VzZXInKTsKICAgIHJldHVybiBxdWVyeV9kYWlseS5lYWNoKGZ1bmN0aW9uIChhY3RpdmVVc2Vyc0RhdGEpIHsKICAgICAgdmFyIGlkID0gYWN0aXZlVXNlcnNEYXRhLmdldCgndXNlcicpLmlkOwogICAgICBpZiAoYWN0aXZlVXNlcnMuaW5kZXhPZihpZCkgPCAwKSB7CiAgICAgICAgYWN0aXZlVXNlcnMucHVzaChpZCk7CiAgICAgIH0KICAgIH0sIHsgdXNlTWFzdGVyS2V5OiB0cnVlIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gYWN0aXZlVXNlcnM7CiAgICB9KTsKICB9CgogIC8vIC0tLS0tCgogIGZ1bmN0aW9uIGRhdGVUb1N0cmluZyhpbkRhdGUpIHsKICAgIHZhciBwYWRkaW5nID0gJzAwJzsKICAgIHZhciBkYXkgPSAnJyArIGluRGF0ZS5nZXRVVENEYXRlKCk7CiAgICB2YXIgbW9udGggPSAnJyArIChpbkRhdGUuZ2V0VVRDTW9udGgoKSArIDEpOwogICAgcmV0dXJuIHBhZGRpbmcuc3Vic3RyKGRheS5sZW5ndGgpICsgZGF5ICsgJy8nICsgKHBhZGRpbmcuc3Vic3RyKG1vbnRoLmxlbmd0aCkgKyBtb250aCkgKyAnLycgKyBpbkRhdGUuZ2V0VVRDRnVsbFllYXIoKTsKICB9CgogIGZ1bmN0aW9uIGFkZERheShpbkRhdGUsIGFtb3VudCkgewogICAgaWYgKGFtb3VudCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIGFtb3VudCA9IDE7CiAgICB9CgogICAgdmFyIG91dERhdGUgPSBuZXcgRGF0ZSgpOwogICAgb3V0RGF0ZS5zZXRUaW1lKGluRGF0ZS5nZXRUaW1lKCkgKyBhbW91bnQgKiBzdGVwICogMjQgKiA2MCAqIDYwICogMTAwMCk7CiAgICByZXR1cm4gb3V0RGF0ZTsKICB9Cn0KCm1vZHVsZS5leHBvcnRzID0gc3RlcENvaG9ydFJlcG9ydDs="}},{"text":"updateOldUsers.js","data":{"code":"data:plain/text;base64,J3VzZSBzdHJpY3QnOwoKLy92YXIgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7Cgp2YXIgX3JlZ2VuZXJhdG9yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvcicpOwoKdmFyIF9yZWdlbmVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWdlbmVyYXRvcik7Cgp2YXIgX2FzeW5jVG9HZW5lcmF0b3IyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3InKTsKCnZhciBfYXN5bmNUb0dlbmVyYXRvcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3luY1RvR2VuZXJhdG9yMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKdmFyIFJlYWRQcmVmZXJlbmNlID0gcmVxdWlyZSgnbW9uZ29kYicpLlJlYWRQcmVmZXJlbmNlOwp2YXIgcXVlcnlEYXRlcyA9IHJlcXVpcmUoJy4uL3V0aWwvcXVlcnlEYXRlcycpOwp2YXIgZGIgPSByZXF1aXJlKCcuLi91dGlsL2RiJyk7CnZhciBzZXR0aW5ncyA9IHJlcXVpcmUoJy4uL3NldHRpbmdzJyk7Cgp2YXIgdXBkYXRlVXNlcnMgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYgPSAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yMi5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gX2NhbGxlZShfZGIsIHVzZXJzKSB7CiAgICB2YXIgYmF0Y2g7CiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGJhdGNoID0gX2RiLmNvbGxlY3Rpb24oJ0I0YVVzZXInKS5pbml0aWFsaXplVW5vcmRlcmVkQnVsa09wKHsgdXNlTGVnYWN5T3BzOiB0cnVlIH0pOwoKICAgICAgICAgICAgdXNlcnMuZm9yRWFjaChmdW5jdGlvbiAodXNlcikgewogICAgICAgICAgICAgIGJhdGNoLmZpbmQoeyBfaWQ6IHVzZXIuX2lkLnNwbGl0KCckJykucG9wKCksIGFjdGl2YXRpb25fZGF0ZTogbnVsbCB9KS51cGRhdGVPbmUoeyAkc2V0OiB7IGFjdGl2YXRpb25fZGF0ZTogdXNlci5hY3RpdmF0aW9uX2RhdGUgfSB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICByZXR1cm4gYmF0Y2guZXhlY3V0ZSgpOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgIGNhc2UgJ2VuZCc6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlLCB1bmRlZmluZWQpOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVVzZXJzKF94LCBfeDIpIHsKICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKdmFyIGdldEFjdGl2ZVVzZXJzID0gZnVuY3Rpb24gKCkgewogIHZhciBfcmVmMiA9ICgwLCBfYXN5bmNUb0dlbmVyYXRvcjMuZGVmYXVsdCkoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3IyLmRlZmF1bHQubWFyayhmdW5jdGlvbiBfY2FsbGVlMihfZGIpIHsKICAgIHZhciBBY3RpdmVVc2VyczsKICAgIHJldHVybiBfcmVnZW5lcmF0b3IyLmRlZmF1bHQud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIF9kYi5jb2xsZWN0aW9uKCdhY3RpdmVfdXNlcnMnLCB7IHJlYWRQcmVmZXJlbmNlOiBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUllfUFJFRkVSUkVEIH0pLmZpbmQoKS50b0FycmF5KCk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICBBY3RpdmVVc2VycyA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgncmV0dXJuJywgQWN0aXZlVXNlcnMpOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgIGNhc2UgJ2VuZCc6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTIsIHVuZGVmaW5lZCk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gZ2V0QWN0aXZlVXNlcnMoX3gzKSB7CiAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7Cgp2YXIgZ2V0REIgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYzID0gKDAsIF9hc3luY1RvR2VuZXJhdG9yMy5kZWZhdWx0KSggLyojX19QVVJFX18qL19yZWdlbmVyYXRvcjIuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gZGIuZ2V0Q29ubmVjdGlvbihzZXR0aW5ncy5BUFBfTU9OR09fVVJJKTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCdyZXR1cm4nLCBfY29udGV4dDMuc2VudCk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgY2FzZSAnZW5kJzoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMywgdW5kZWZpbmVkKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiBnZXREQigpIHsKICAgIHJldHVybiBfcmVmMy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCnZhciBleGVjID0gZnVuY3Rpb24gKCkgewogIHZhciBfcmVmNCA9ICgwLCBfYXN5bmNUb0dlbmVyYXRvcjMuZGVmYXVsdCkoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3IyLmRlZmF1bHQubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgIHZhciBfZGIsIHVzZXJzOwoKICAgIHJldHVybiBfcmVnZW5lcmF0b3IyLmRlZmF1bHQud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIGdldERCKCk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICBfZGIgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA1OwogICAgICAgICAgICByZXR1cm4gZ2V0QWN0aXZlVXNlcnMoX2RiKTsKCiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIHVzZXJzID0gX2NvbnRleHQ0LnNlbnQ7CiAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gODsKICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZVVzZXJzKF9kYiwgdXNlcnMpOwoKICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoJ3JldHVybicsICdTVUNDRVNTJyk7CgogICAgICAgICAgY2FzZSA5OgogICAgICAgICAgY2FzZSAnZW5kJzoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlNCwgdW5kZWZpbmVkKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiBleGVjKCkgewogICAgcmV0dXJuIF9yZWY0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKaWYgKHJlcXVpcmUubWFpbiA9PT0gbW9kdWxlKSB7CiAgZXhlYygpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgY29uc29sZS5sb2cocmVzdWx0KTsKICAgIHByb2Nlc3MuZXhpdCgwKTsKICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICBjb25zb2xlLmVycm9yKGVycik7CiAgICBwcm9jZXNzLmV4aXQoZXJyKTsKICB9KTsKfQoKbW9kdWxlLmV4cG9ydHMgPSBleGVjOw=="}}],"state":{"opened":true},"type":"folder"},{"text":"main.js","data":{"code":"data:plain/text;base64,"}},{"text":"package.json","data":{"code":"data:plain/text;base64,ewogICJkZXBlbmRlbmNpZXMiOiB7CiAgICAiYmFiZWwtcnVudGltZSI6ICJeNi4yNi4wIiwKICAgICJjbyI6ICJeNC42LjAiLAogICAgIm5vZGUtYWR3b3JkcyI6ICJeMjAxODAyLjEuMCIsCiAgICAibW9tZW50IjogIl4yLjIxLjAiLAogICAgImdvb2dsZWFwaXMiOiAiXjIwLjAuMSIsCiAgICAiY3N2dG9qc29uIjogIl4xLjEuOSIKICB9Cn0K"}},{"text":"settings.js","data":{"code":"data:plain/text;base64,J3VzZSBzdHJpY3QnOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgV3JhcHBlciA9IGZ1bmN0aW9uIFdyYXBwZXIoKSB7CiAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgV3JhcHBlcik7CgogIHRoaXMuUEFSU0VfQVBQU19NT05HT19VUkkgPSAnbnVsbCc7CiAgdGhpcy5NT05HT19VUkkgPSAnbnVsbCc7CiAgdmFyIHNldHRpbmdzID0gdGhpczsKICBQYXJzZS5Db25maWcuZ2V0KCkudGhlbihmdW5jdGlvbiAoY29uZmlnKSB7CiAgICBzZXR0aW5ncy5QQVJTRV9BUFBTX01PTkdPX1VSSSA9IGNvbmZpZy5nZXQoJ1BBUlNFX0FQUFNfTU9OR09fVVJJJyk7CiAgICBzZXR0aW5ncy5NT05HT19VUkkgPSBjb25maWcuZ2V0KCdNT05HT19VUkknKTsKICAgIHNldHRpbmdzLkFQUF9NT05HT19VUkkgPSBjb25maWcuZ2V0KCdBUFBfTU9OR09fVVJJJyk7CiAgICBzZXR0aW5ncy5DSEVDS09VVF9NT05HT19VUkkgPSBjb25maWcuZ2V0KCdDSEVDS09VVF9NT05HT19VUkknKTsKICAgIHNldHRpbmdzLkNIRUNLT1VUX0FQUF9JRCA9IGNvbmZpZy5nZXQoJ0NIRUNLT1VUX0FQUF9JRCcpOwogICAgc2V0dGluZ3MuQ0hFQ0tPVVRfTUFTVEVSX0tFWSA9IGNvbmZpZy5nZXQoJ0NIRUNLT1VUX01BU1RFUl9LRVknKTsKICB9KTsKfTsKCnZhciB0ZXN0VmFycyA9IHsKICBBUFBfTU9OR09fVVJJOiAnbW9uZ29kYjovL2xvY2FsaG9zdC9jb2hvcnQnLAogIENIRUNLT1VUX0FQUF9JRDogJ200WkpQV0hFNjkyQXJrQnNiOVA5ZU5hNHREbFJOZGlkRWRQUGVkWlknLAogIENIRUNLT1VUX01BU1RFUl9LRVk6ICdEUmEzbTc2dUFCTEszblplWkpKdDR0ZnFhZW80azZjYkl6N1paUTZDJywKICBDSEVDS09VVF9NT05HT19VUkk6ICdtb25nb2RiOi8vYWRtaW46YXF0bDRma1JzN1lFQmRZZ1JxSGxLbFl3QG1vbmdvZGI3LmJhY2s0YXBwLmNvbToyNzAxNy8wYmI5YzBiZDdhZGM0ZDUyYTYwM2I3OWIzZGFhNDMyNC0yJywKICBNT05HT19VUkk6ICdtb25nb2RiOi8vbG9jYWxob3N0L2JhY2s0YXBwJywKICBQQVJTRV9BUFBTX01PTkdPX1VSSTogJ21vbmdvZGI6Ly9sb2NhbGhvc3QvYmFjazRhcHAnCn07Cgptb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcgPyB0ZXN0VmFycyA6IG5ldyBXcmFwcGVyKCk7"}},{"text":"util","children":[{"text":"checkout.js","data":{"code":"data:plain/text;base64,J3VzZSBzdHJpY3QnOwoKdmFyIHNldHRpbmdzID0gcmVxdWlyZSgnLi4vc2V0dGluZ3MnKTsKCm1vZHVsZS5leHBvcnRzID0ge307Cgptb2R1bGUuZXhwb3J0cy5nZXRQbGFucyA9IGZ1bmN0aW9uICgpIHsKICB2YXIgYXBwSWQgPSB2b2lkIDAsCiAgICAgIG1hc3RlcktleSA9IHZvaWQgMDsKICBhcHBJZCA9IHNldHRpbmdzLkNIRUNLT1VUX0FQUF9JRDsKICBtYXN0ZXJLZXkgPSBzZXR0aW5ncy5DSEVDS09VVF9NQVNURVJfS0VZOwogIHJldHVybiBQYXJzZS5DbG91ZC5odHRwUmVxdWVzdCh7CiAgICBtZXRob2Q6ICdHRVQnLAogICAgdXJsOiAnaHR0cHM6Ly9jaGVja291dC5iYWNrNGFwcC5pby9jbGFzc2VzL1BsYW4nLAogICAgaGVhZGVyczogewogICAgICAnWC1QYXJzZS1BcHBsaWNhdGlvbi1JZCc6IGFwcElkLAogICAgICAnWC1QYXJzZS1NYXN0ZXItS2V5JzogbWFzdGVyS2V5CiAgICB9CiAgfSkudGhlbihmdW5jdGlvbiAoaHR0cFJlc3BvbnNlKSB7CiAgICB2YXIgZGF0YSA9IHt9OwogICAgaHR0cFJlc3BvbnNlLmRhdGEucmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uIChwbGFuKSB7CiAgICAgIGRhdGFbcGxhbi5uYW1lXSA9IHBsYW4uYW1vdW50OwogICAgfSk7CiAgICByZXR1cm4gZGF0YTsKICB9LCBmdW5jdGlvbiAoZSkgewogICAgY29uc29sZS5sb2coZSk7CiAgfSk7Cn07"}},{"text":"db.js","data":{"code":"data:plain/text;base64,J3VzZSBzdHJpY3QnOwoKdmFyIE1vbmdvQ2xpZW50ID0gcmVxdWlyZSgnbW9uZ29kYicpLk1vbmdvQ2xpZW50Owp2YXIgc2V0dGluZ3MgPSByZXF1aXJlKCcuLi9zZXR0aW5ncycpOwoKY29uc29sZS5sb2coc2V0dGluZ3MpOwoKZnVuY3Rpb24gZ2V0Q29ubmVjdGlvbihtb25nb1VSSSkgewogIHJldHVybiBNb25nb0NsaWVudC5jb25uZWN0KG1vbmdvVVJJIHx8IHNldHRpbmdzLlBBUlNFX0FQUFNfTU9OR09fVVJJKS50aGVuKGZ1bmN0aW9uIChfZGIpIHsKICAgIHJldHVybiBfZGI7CiAgfSk7Cn0KCmZ1bmN0aW9uIGdldERiKGRiTmFtZSkgewogIHJldHVybiBnZXRDb25uZWN0aW9uKCkudGhlbihmdW5jdGlvbiAoX2RiKSB7CiAgICByZXR1cm4gX2RiLmRiKGRiTmFtZSk7CiAgfSk7Cn0KCm1vZHVsZS5leHBvcnRzID0ge307Cm1vZHVsZS5leHBvcnRzLmdldENvbm5lY3Rpb24gPSBnZXRDb25uZWN0aW9uOwptb2R1bGUuZXhwb3J0cy5nZXREYiA9IGdldERiOw=="}},{"text":"queryDates.js","data":{"code":"data:plain/text;base64,J3VzZSBzdHJpY3QnOwoKbW9kdWxlLmV4cG9ydHMgPSB7fTsKbW9kdWxlLmV4cG9ydHMucGFyc2VEYXRlID0gcGFyc2VEYXRlOwptb2R1bGUuZXhwb3J0cy5wYXJzZVF1ZXJ5RGF0ZXMgPSBwYXJzZVF1ZXJ5RGF0ZXM7Cm1vZHVsZS5leHBvcnRzLmdldEZvcm1hdCA9IGdldEZvcm1hdDsKbW9kdWxlLmV4cG9ydHMuZ2V0RGF0ZVN0cmluZyA9IGdldERhdGVTdHJpbmc7CgpmdW5jdGlvbiBnZXRGb3JtYXQoKSB7CiAgcmV0dXJuICdZWVlZTU1ERGhobW0nOwp9CgpmdW5jdGlvbiBwYXJzZVF1ZXJ5RGF0ZXMocXVlcnlPYmopIHsKICBpZiAocXVlcnlPYmouZW5kRGF0ZSkgewogICAgcXVlcnlPYmouZW5kRGF0ZSA9IHBhcnNlRGF0ZShxdWVyeU9iai5lbmREYXRlKTsKICB9IGVsc2UgewogICAgcXVlcnlPYmouZW5kRGF0ZSA9IG5ldyBEYXRlKCk7CiAgICBxdWVyeU9iai5lbmREYXRlLnNldEhvdXJzKDApOwogICAgcXVlcnlPYmouZW5kRGF0ZS5zZXRNaW51dGVzKDApOwogICAgcXVlcnlPYmouZW5kRGF0ZS5zZXRTZWNvbmRzKDApOwogICAgcXVlcnlPYmouZW5kRGF0ZS5zZXRNaWxsaXNlY29uZHMoMCk7CiAgICBxdWVyeU9iai5lbmREYXRlLnNldEhvdXJzKC0yNCk7CiAgfQogIGlmIChxdWVyeU9iai5iZWdpbkRhdGUpIHsKICAgIHF1ZXJ5T2JqLmJlZ2luRGF0ZSA9IHBhcnNlRGF0ZShxdWVyeU9iai5iZWdpbkRhdGUpOwogIH0gZWxzZSB7CiAgICBxdWVyeU9iai5iZWdpbkRhdGUgPSBuZXcgRGF0ZShxdWVyeU9iai5lbmREYXRlKTsKICAgIHF1ZXJ5T2JqLmJlZ2luRGF0ZS5zZXRIb3VycygtMjQpOwogIH0KICByZXR1cm4gcXVlcnlPYmo7Cn0KCmZ1bmN0aW9uIHBhcnNlRGF0ZShzdHJpbmcpIHsKICB2YXIgeWVhciA9IHN0cmluZy5zdWJzdHIoMCwgNCk7CiAgdmFyIG1vbnRoID0gTnVtYmVyKHN0cmluZy5zdWJzdHIoNCwgMikgfHwgMSkgLSAxOwogIHZhciBkYXkgPSBzdHJpbmcuc3Vic3RyKDYsIDIpOwogIHZhciBob3VyID0gc3RyaW5nLnN1YnN0cig4LCAyKTsKICB2YXIgbWludXRlID0gc3RyaW5nLnN1YnN0cigxMCwgMik7CiAgcmV0dXJuIG5ldyBEYXRlKHllYXIgfHwgMjAxNywgbW9udGggfHwgMCwgZGF5IHx8IDEsIGhvdXIgfHwgMCwgbWludXRlIHx8IDApOwp9CgpmdW5jdGlvbiBnZXREYXRlU3RyaW5nKGRhdGUsIHllc3RlcmRheSkgewogIGlmICh5ZXN0ZXJkYXkpIGRhdGUuc2V0SG91cnMoLTI0KTsKICB2YXIgZGF0ZVN0cmluZyA9ICcnOwogIGRhdGVTdHJpbmcgKz0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOwogIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKSArIDE7CiAgZGF0ZVN0cmluZyArPSBtb250aCA+PSAxMCA/IG1vbnRoIDogJzAnICsgbW9udGg7CiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF0ZSgpOwogIGRhdGVTdHJpbmcgKz0gZGF5ID49IDEwID8gZGF5IDogJzAnICsgZGF5OwogIHJldHVybiBkYXRlU3RyaW5nOwp9"}}],"state":{"opened":true},"type":"folder"},{"text":"views","children":[{"text":"index.ejs","data":{"code":"data:plain/text;base64,PCFET0NUWVBFIGh0bWw+CjxodG1sPgoKPGhlYWQ+CiAgICA8dGl0bGU+Q29ob3J0IFJlcG9ydDwvdGl0bGU+CjwvaGVhZD4KCjxib2R5Pgo8aDE+Q29ob3J0IFJlcG9ydDwvaDE+Cjxmb3JtIGFjdGlvbj0iL3JlcG9ydCIgbWV0aG9kPSJnZXQiPgogICAgUmVmZXJlcjoKICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJyZWZlcmVyIj4KCiAgICA8YnI+CiAgICA8YnI+IEFkd29yZHM6CiAgICA8c2VsZWN0IG5hbWU9ImFkd29yZHMiPgogICAgICAgIDxvcHRpb24gdmFsdWU9Im9yZ2FuaWMiPk9yZ2FuaWM8L29wdGlvbj4KICAgICAgICA8b3B0aW9uIHZhbHVlPSJwYWlkIj5QYWlkPC9vcHRpb24+CiAgICAgICAgPG9wdGlvbiB2YWx1ZT0ibm8tZmlsdGVyIj5Oby1maWx0ZXI8L29wdGlvbj4KICAgIDwvc2VsZWN0PgogICAgPGJyPgogICAgPGJyPiBQZXJpb2QgQmVnaW46CiAgICA8aW5wdXQgdHlwZT0iZGF0ZSIgbmFtZT0iYmVnaW4iIHJlcXVpcmVkPiBQZXJpb2QgRW5kOgogICAgPGlucHV0IHR5cGU9ImRhdGUiIG5hbWU9ImVuZCIgcmVxdWlyZWQ+CiAgICA8YnI+CiAgICA8YnI+IENvaG9ydCBCZWdpbjoKICAgIDxpbnB1dCB0eXBlPSJkYXRlIiBuYW1lPSJjb2hvcnQtYmVnaW4iPiBDb2hvcnQgRW5kOgogICAgPGlucHV0IHR5cGU9ImRhdGUiIG5hbWU9ImNvaG9ydC1lbmQiPgogICAgPGJyPgogICAgPGJyPiB1dG1fc291cmNlOgogICAgPHNlbGVjdCBuYW1lPSJ1dG1fc291cmNlIj4KICAgICAgICA8b3B0aW9uIHZhbHVlPSIiPkFsbDwvb3B0aW9uPgogICAgICAgIDxvcHRpb24gdmFsdWU9Ik5PTkUiPk5vIHNvdXJjZTwvb3B0aW9uPgogICAgICAgIDwlIHV0bV9zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24odXRtX3NvdXJjZSkgeyAlPgogICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI8JT0gdXRtX3NvdXJjZSAlPiI+PCU9IHV0bV9zb3VyY2UgJT48L29wdGlvbj4KICAgICAgICA8JSB9KTsgJT4KICAgIDwvc2VsZWN0PgogICAgPGJyPgogICAgPGJyPiB1dG1fY2FtcGFpZ246CiAgICA8c2VsZWN0IG5hbWU9InV0bV9jYW1wYWlnbiI+CiAgICAgICAgPG9wdGlvbiB2YWx1ZT0iIj5BbGw8L29wdGlvbj4KICAgICAgICA8b3B0aW9uIHZhbHVlPSJOT05FIj5ObyBjYW1wYWlnbjwvb3B0aW9uPgogICAgICAgIDwlIHV0bV9jYW1wYWlnbnMuZm9yRWFjaChmdW5jdGlvbih1dG1fY2FtcGFpZ24pIHsgJT4KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iPCU9IHV0bV9jYW1wYWlnbiAlPiI+PCU9IHV0bV9jYW1wYWlnbiAlPjwvb3B0aW9uPgogICAgICAgIDwlIH0pOyAlPgogICAgPC9zZWxlY3Q+CiAgICA8YnI+CiAgICA8YnI+IHV0bV90ZXJtOgogICAgPHNlbGVjdCBuYW1lPSJ1dG1fdGVybSI+CiAgICAgICAgPG9wdGlvbiB2YWx1ZT0iIj5BbGw8L29wdGlvbj4KICAgICAgICA8b3B0aW9uIHZhbHVlPSJOT05FIj5ObyB0ZXJtPC9vcHRpb24+CiAgICAgICAgPCUgdXRtX3Rlcm1zLmZvckVhY2goZnVuY3Rpb24odXRtX3Rlcm0pIHsgJT4KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iPCU9IHV0bV90ZXJtICU+Ij48JT0gdXRtX3Rlcm0gJT48L29wdGlvbj4KICAgICAgICA8JSB9KTsgJT4KICAgIDwvc2VsZWN0PgogICAgPGJyPgogICAgPGJyPiB1dG1fbWVkaXVtOgogICAgPHNlbGVjdCBuYW1lPSJ1dG1fbWVkaXVtIj4KICAgICAgICA8b3B0aW9uIHZhbHVlPSIiPkFsbDwvb3B0aW9uPgogICAgICAgIDxvcHRpb24gdmFsdWU9Ik5PTkUiPk5vIG1lZGl1bTwvb3B0aW9uPgogICAgICAgIDwlIHV0bV9tZWRpdW1zLmZvckVhY2goZnVuY3Rpb24odXRtX21lZGl1bSkgeyAlPgogICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSI8JT0gdXRtX21lZGl1bSAlPiI+PCU9IHV0bV9tZWRpdW0gJT48L29wdGlvbj4KICAgICAgICA8JSB9KTsgJT4KICAgIDwvc2VsZWN0PgogICAgPGJyPgogICAgPGJyPiB1dG1fY29udGVudDoKICAgIDxzZWxlY3QgbmFtZT0idXRtX2NvbnRlbnQiPgogICAgICAgIDxvcHRpb24gdmFsdWU9IiI+QWxsPC9vcHRpb24+CiAgICAgICAgPG9wdGlvbiB2YWx1ZT0iTk9ORSI+Tm8gY29udGVudDwvb3B0aW9uPgogICAgICAgIDwlIHV0bV9jb250ZW50cy5mb3JFYWNoKGZ1bmN0aW9uKHV0bV9jb250ZW50KSB7ICU+CiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjwlPSB1dG1fY29udGVudCAlPiI+PCU9IHV0bV9jb250ZW50ICU+PC9vcHRpb24+CiAgICAgICAgPCUgfSk7ICU+CiAgICA8L3NlbGVjdD4KICAgIDxicj4KICAgIDxidXR0b24gdHlwZT0ic3VibWl0Ij5TdWJtaXQ8L2J1dHRvbj4KPC9mb3JtPgo8L2JvZHk+Cgo8L2h0bWw+Cg=="}}],"state":{"opened":true},"type":"folder"}]},{"text":"public","state":{"opened":true},"type":"folder","children":[{"text":"index.html","data":{"code":"data:plain/text;base64,CjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPk15IFBhcnNlQXBwIHNpdGU8L3RpdGxlPgogICAgPHN0eWxlPgogICAgYm9keSB7IGZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyB9CiAgICBkaXYgeyB3aWR0aDogODAwcHg7IGhlaWdodDogNDAwcHg7IG1hcmdpbjogNDBweCBhdXRvOyBwYWRkaW5nOiAyMHB4OyBib3JkZXI6IDJweCBzb2xpZCAjNTI5OGZjOyB9CiAgICBoMSB7IGZvbnQtc2l6ZTogMzBweDsgbWFyZ2luOiAwOyB9CiAgICBwIHsgbWFyZ2luOiA0MHB4IDA7IH0KICAgIGVtIHsgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTsgfQogICAgYSB7IGNvbG9yOiAjNTI5OGZjOyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH0KICAgIDwvc3R5bGU+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPGRpdj4KICAgICAgPGgxPkNvbmdyYXR1bGF0aW9ucyEgWW91J3JlIGFscmVhZHkgaG9zdGluZyB3aXRoIFBhcnNlLjwvaDE+CiAgICAgIDxwPlRvIGdldCBzdGFydGVkLCBlZGl0IHRoaXMgZmlsZSBhdCA8ZW0+cHVibGljL2luZGV4Lmh0bWw8L2VtPiBhbmQgc3RhcnQgYWRkaW5nIHN0YXRpYyBjb250ZW50LjwvcD4KICAgICAgPHA+SWYgeW91IHdhbnQgc29tZXRoaW5nIGEgYml0IG1vcmUgZHluYW1pYywgZGVsZXRlIHRoaXMgZmlsZSBhbmQgY2hlY2sgb3V0IDxhIGhyZWY9Imh0dHBzOi8vcGFyc2UuY29tL2RvY3MvaG9zdGluZ19ndWlkZSN3ZWJhcHAiPm91ciBob3N0aW5nIGRvY3M8L2E+LjwvcD4KICAgIDwvZGl2PgogIDwvYm9keT4KPC9odG1sPgo="}}]}]}

const create = (data, file) => {
  let inst = $.jstree.reference(data),
    obj = inst.get_node(data);
  if (!file) {
    inst.create_node(obj, {
      type: 'new-folder',
      text: 'New Folder',
      state: { opened: true }
    });
  } else {
    inst.create_node(obj, {
      type: 'new-file',
      text: file.text.name,
      data: file.data
    });
  }
}

const remove = (data) => {
  let inst = $.jstree.reference(data)
  let obj = inst.get_node(data);
  if (inst.is_selected(obj)) {
    inst.delete_node(inst.get_selected());
  } else {
    inst.delete_node(obj);
  }
}

const decodeFile = code => {
  try {
    if (code) {
      let encodedCode = code.split(',')[1]
      let decodedCode = atob(encodedCode)
      code = decodedCode
    }
  } catch (err) {
    console.error(err)
  }
  return code
}

const readFile = (file, newTreeNodes) => {
  file.code = decodeFile(file.code)
  newTreeNodes.push({
    text: file.name,
    data: {
      code: file.code
    }
  })
  return newTreeNodes
}

const verifyFileNames = (data, newTreeNodes) => {
  let inst = $.jstree.reference(data)
  let currentCode = inst.get_node(data);
  console.log(currentCode)
  for (let i = 0; i < currentCode.length; i++) {
    for (let j = 0; j < newTreeNodes.length; j++) {
      if (currentCode[i].text === newTreeNodes[j].text) {
        if (alert.confirm(newTreeNodes[j].text +
            ' file already exists. Do you want to overwrite?')) {
          currentCode.splice(i, 1);
        } else {
          newTreeNodes.splice(j, 1);
        }
      }
    }
  }
}

const addFilesOnTree = (files, currentCode) => {
  let newTreeNodes = [];
  for (let i = 0; i < files.fileList.length; i++) {
    newTreeNodes = readFile({ name: files.fileList[i], code: files.base64[i] }, newTreeNodes);
  }
  let re = /(?:\.([^.]+))?$/, ext;
  verifyFileNames(currentCode, newTreeNodes);
  for (let i = 0; i < newTreeNodes.length; i++) {
    ext = re.exec(newTreeNodes[i].text)[1];
    console.log(ext)
    if (currentCode === '#') {
      let inst = $.jstree.reference(currentCode)
      let obj = inst.get_node(currentCode);
      if (ext === 'js')
        currentCode += obj.children[0]
      else currentCode += obj.children[1]
    }
    create(currentCode, newTreeNodes[i])
  }
  return currentCode;
}

const customMenu = node => {
  // The default set of all items
  let items = $.jstree.defaults.contextmenu.items();
  items.create.action = function (data) {
    create(data.reference)
  };
  items.remove.action = function (data) {
    remove(data.reference)
  };
  delete items.ccp;
  if (node.type === 'default' || node.type === 'new-file') {
    delete items.create;
    delete items.rename;
  }
  if (node.text === 'cloud' && node.parent === '#') {
    delete items.remove;
    delete items.rename;
    delete items.ccp;
  }
  if (node.text === 'public' && node.parent === '#') {
    delete items.remove;
    delete items.rename;
    delete items.ccp;
  }
  return items;
}

const iterateOverFolders = folder => {
  if (folder.type === 'folder') folder.children.forEach(iterateOverFolders)
  if (folder.data && folder.data.code) folder.data.code = decodeFile(folder.data.code)
}

const getData = () => {
  source.tree.forEach(iterateOverFolders)
  console.log('source.tree', source.tree)
  return source.tree
}

const getConfig = () => {
  return {
    plugins: ['contextmenu', 'dnd', 'sort', 'types', 'unique', 'changed'],
    core: {
      "check_callback": true,
      'data': getData()
    },
    contextmenu: {items: customMenu},
    types: {
      '#': {
        max_children: 2
      },
      default: {
        icon: 'zmdi zmdi-file',
        max_children: 0
      },
      folder: {
        icon: 'zmdi zmdi-folder',
        max_depth: 10,
        max_children: 100
      },
      "new-folder": {
        icon: 'zmdi zmdi-folder new',
        max_depth: 10,
        max_children: 100
      },
      "new-file": {
        icon: 'zmdi zmdi-file new',
        max_children: 0
      }
    }
  }
}

module.exports = {
  getData,
  getConfig,
  remove,
  addFilesOnTree,
  readFile
}
